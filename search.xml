<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端-浏览器缓存</title>
    <url>/2024/04/09/%E5%89%8D%E7%AB%AF%E8%AF%BE%E7%A8%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<span id="more"></span>


]]></content>
  </entry>
  <entry>
    <title>前端-事件循环</title>
    <url>/2024/04/03/%E5%89%8D%E7%AB%AF%E8%AF%BE%E7%A8%8B-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>事件循环，如何理解 js 的异步？js 为什么会阻碍渲染？任务优先级？阐述一下js的事件循环？js计时器能做到精准吗？</p>
<span id="more"></span>

<h3 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h3><h4 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h4><p>浏览器是一个多进程和多线程的应用程序。主要有浏览器进程，网络进程，渲染进程：进程开始时会开启渲染主线程，主要负责执行 html,css,js 代码，渲染界面。</p>
<h4 id="面试题：如何理解-js-的异步？"><a href="#面试题：如何理解-js-的异步？" class="headerlink" title="面试题：如何理解 js 的异步？"></a>面试题：如何理解 js 的异步？</h4><p>js 是一门单线程语言，因为运行在浏览器的渲染主线程中，而浏览器每个渲染进程的渲染主线程只有一个，承担着许多工作，渲染页面,执行界面。如同步，会造成主线程阻塞，导致消息队列的其他任务无法进行，白白消耗时间，还会造成页面无法更新，用户卡死。<br>所以浏览器采用异步的方式处理，比如计时器、网络、时间监听、主线程将任务交给其他线程处理，其他线程处理完将回调函数包装成任务放到消息队列队尾，在等待主线程调度。这样就保证了单线程的流畅运行。</p>
<h4 id="js-为什么会阻碍渲染？"><a href="#js-为什么会阻碍渲染？" class="headerlink" title="js 为什么会阻碍渲染？"></a>js 为什么会阻碍渲染？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;testText&quot;</span>&gt;</span><br><span class="line">    哈哈哈</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;testButton&quot;</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;testButton2&quot;</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//死循环指定时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">duration</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">while</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - start &lt; duration)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过 JavaScript 在按钮上添加点击事件监听器</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;testButton&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.testText&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;呵呵呵&quot;</span>  <span class="comment">//此处会立即执行，但是渲染绘制任务会排在消息队列后，所以页面得 delay(3000) 之后才会开始，也会导致阻塞页面其他功能。</span></span><br><span class="line">    <span class="title function_">delay</span>(<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;testButton2&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.testText&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;嘻嘻嘻&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="任务优先级？"><a href="#任务优先级？" class="headerlink" title="任务优先级？"></a>任务优先级？</h4><p>任务没有优先级，在消息队列里先进先出。但是消息队列有优先级。<br>根据 W3C 最新解释：<br>每个任务都有一个任务类型，同一任务类型必须在一个队列，不同类型任务可以分属于不同的队列。<br>浏览器必须准备一个微队列 microtask,优先于其他队列。</p>
<p>微队列 》交互队列 》延时队列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//立即把一个函数添加到微队列</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(函数)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">duration</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      <span class="keyword">while</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - start &lt; duration)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">delay</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">//会输出2 1</span></span><br></pre></td></tr></table></figure>
<h4 id="面试题：阐述一下js的事件循环？"><a href="#面试题：阐述一下js的事件循环？" class="headerlink" title="面试题：阐述一下js的事件循环？"></a>面试题：阐述一下js的事件循环？</h4><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。<br>在Chrome的源码中，它开启了不会结束的for循环，每次取第一个任务执行，其他任务加到队尾。<br>过去把消息队列简单分为宏队列和微队列，这种已经无法满足当前复杂的浏览器环境。<br>根据 W3C 最新解释：<br>每个任务都有一个任务类型，同一任务类型必须在一个队列，不同类型任务可以分属于不同的队列。<br>浏览器必须准备一个微队列 microtask,优先于其他队列。</p>
<h4 id="面试题：js计时器能做到精准吗？为什么？"><a href="#面试题：js计时器能做到精准吗？为什么？" class="headerlink" title="面试题：js计时器能做到精准吗？为什么？"></a>面试题：js计时器能做到精准吗？为什么？</h4><p>不行。<br>.按照W3C标准，嵌套层级超过5层，则带有4毫秒的最少时间，就会有偏差。<br>.受事件循环影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>前端-浏览器渲染原理</title>
    <url>/2024/04/01/%E5%89%8D%E7%AB%AF%E8%AF%BE%E7%A8%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>浏览器渲染原理。什么是 reflow?什么是 repaint?为什么 transform 的效率高?</p>
<span id="more"></span>

<h3 id="1-浏览器是如何渲染页面的？"><a href="#1-浏览器是如何渲染页面的？" class="headerlink" title="1.浏览器是如何渲染页面的？"></a>1.浏览器是如何渲染页面的？</h3><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。<br>整个渲染流程分为多个阶段，分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p>
<p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入这样，整个渲染流程就形成了一套组织严密的生产流水线。</p>
<h4 id="渲染的第一步是解析-HTML。"><a href="#渲染的第一步是解析-HTML。" class="headerlink" title="渲染的第一步是解析 HTML。"></a>渲染的第一步是解析 HTML。</h4><p>解析过程中遇到 CSS 解析 CSS, 遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。<br>如果主线程解析到 Link 位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。<br>如果主线程解析到 script 位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。<br>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p>
<h4 id="渲染的下一步是样式计算。"><a href="#渲染的下一步是样式计算。" class="headerlink" title="渲染的下一步是样式计算。"></a>渲染的下一步是样式计算。</h4><p>主线程会遍历得到的DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style.在这一过程中，很多预设值会变成绝对值，比如 red 会变成 rgb(255, 0, 0)；相对单位会变成绝对单位，比如 em 会变成 px<br>这一步完成后，会得到一棵带有样式的 DOM 树。</p>
<h4 id="接下来是布局，布局完成后会得到布局树。"><a href="#接下来是布局，布局完成后会得到布局树。" class="headerlink" title="接下来是布局，布局完成后会得到布局树。"></a>接下来是布局，布局完成后会得到布局树。</h4><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。<br>大部分时候，DOM 树和布局树并非——对应。<br>比如 display:none 的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法——对应。</p>
<h4 id="下一步是分层"><a href="#下一步是分层" class="headerlink" title="下一步是分层"></a>下一步是分层</h4><p>主线程会使用一套复杂的策略对整个布局树中进行分层。<br>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。<br>滚动条、堆叠上下文、transform. opacity 等样式都会或多或少的影的分层结果，也可以通过will-change 属性更大程度的影响分层结果。</p>
<h4 id="再下一步是绘制"><a href="#再下一步是绘制" class="headerlink" title="再下一步是绘制"></a>再下一步是绘制</h4><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。<br>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p>
<p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。<br>它会从线程池中拿取多个线程来完成分块工作。</p>
<h4 id="分块完成后，进入光栅化阶段。"><a href="#分块完成后，进入光栅化阶段。" class="headerlink" title="分块完成后，进入光栅化阶段。"></a>分块完成后，进入光栅化阶段。</h4><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。<br>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块<br>光栅化的结果，就是一块一块的位图</p>
<h4 id="最后一个阶段就是画了"><a href="#最后一个阶段就是画了" class="headerlink" title="最后一个阶段就是画了"></a>最后一个阶段就是画了</h4><p>教言<br>合成线程拿到每个层、每个块的位图后，生成一个个「指引(quad)」信息。<br>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。<br>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因。<br>ation<br>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p>
<h3 id="2-什么是-reflow"><a href="#2-什么是-reflow" class="headerlink" title="2.什么是 reflow?"></a>2.什么是 reflow?</h3><p>reflow 的本质就是重新计算 layout 树。<br>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。<br>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。<br>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。I 浏览器在反复权衡下，最终决定获取属性立即 reflow.</p>
<p>回流（reflow）：当render tree中的元素的宽高、布局、显示、隐藏或元素内部文字结结构发生改变时，会影响自身及其父元素、甚至追溯到更多的祖先元素发生改变，则会导致元素内部、周围甚至整个页面的重新渲染，页面发生重构，回流就产生了。</p>
<h3 id="3-什么是-repaint"><a href="#3-什么是-repaint" class="headerlink" title="3.什么是 repaint?"></a>3.什么是 repaint?</h3><p>repaint 的本质就是重新根据分层信息计算了绘制指令。当改动了可见样式后，就需要重新计算，会引发 repaint。<br>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p>
<p>重绘（repaint）：元素的结构（宽高、布局、显示隐藏、内部文字大小）未发生改变，只是元素的外观样式发生改变，比如背景颜色、内部文字颜色、边框颜色等。此时会引起浏览器重绘，显然重绘的速度快于回流。</p>
<p>回流一定会触发重绘，重绘不一定触发回流。</p>
<h3 id="4-为什么-transform-的效率高"><a href="#4-为什么-transform-的效率高" class="headerlink" title="4.为什么 transform 的效率高?"></a>4.为什么 transform 的效率高?</h3><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个 「draw」 阶段由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>
<h3 id="一、简述在浏览器从输入URL到页面加载完成都经历了什么"><a href="#一、简述在浏览器从输入URL到页面加载完成都经历了什么" class="headerlink" title="一、简述在浏览器从输入URL到页面加载完成都经历了什么"></a>一、简述在浏览器从输入URL到页面加载完成都经历了什么</h3><p>浏览器地址栏输入url地址，首先要在客户端上进行url解析<br>浏览器会首先查看自身的缓存，如果浏览器缓存中有对应的解析记录，直接返回结果<br>如果浏览器没有缓存，电脑会查看本地操作系统的缓存，如果有记录，直接返回结果（host文件）<br>如果本地没有缓存该域名的IP地址，就需要通过递归或的方式向根域名服务器、顶级域名服务器、权威域名服务器发起查询请求，直至返回一个IP地址给浏览器。<br>然后根据该IP地址建立TCP连接。<br>客户端发送HTTP请求，服务器返回报文，关闭TCP连接。<br>浏览器内核拿到相应内容后，<br>解析html,css分别建立DOM Tree和CSSOM Tree<br>随后这两个合并成Render Tree。<br>然后布局Render Tree，绘制Render Tree，绘制页面像素信息。<br>浏览器会将各层的信息发送给GPU,GPU会将各层合成，显示在屏幕上。<br>渲染完成。</p>
]]></content>
  </entry>
  <entry>
    <title>webpack和vite笔记</title>
    <url>/2024/03/30/webpack%E5%92%8Cvite%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p> webpack，vite</p>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>零散</title>
    <url>/2024/03/01/%E9%9B%B6%E6%95%A3/</url>
    <content><![CDATA[<p>filter,数组去重，防抖节流封装，函数柯里化，js 函数缓存，this 指向,js 取整，var const let区别,</p>
<span id="more"></span>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment">//current=&gt;当前值，index=&gt;当前值的下标，array=&gt;这个数组对象</span></span><br><span class="line"><span class="keyword">let</span> b = a.<span class="title function_">filter</span>(<span class="function">(<span class="params">current, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> current &lt; <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b,a);</span><br></pre></td></tr></table></figure>

<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">55</span>]</span><br><span class="line"><span class="comment">//Set结构不会添加重复的值</span></span><br><span class="line"><span class="comment">//Set实例转数组</span></span><br><span class="line"><span class="keyword">let</span> item = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]  <span class="comment">//ES6写法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="literal">null</span>]</span><br><span class="line"><span class="keyword">let</span> b = []</span><br><span class="line">a.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item ,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b.<span class="title function_">includes</span>(a[index]))&#123;</span><br><span class="line">        b.<span class="title function_">push</span>(item)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(b);</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line"><span class="comment">// indexOf(要搜索的,开始搜索的索引)</span></span><br><span class="line"><span class="keyword">let</span> xx = a.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">indexOf</span>(item,<span class="number">0</span>) === index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xx);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="防抖节流封装"><a href="#防抖节流封装" class="headerlink" title="防抖节流封装"></a>防抖节流封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fangdou</span> = (<span class="params">fn, timeOut</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;, timeOut);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防抖   一直提交，直到最后一次停留wait秒才发起请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">antiShake</span>(<span class="params">fn,wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeOut = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">args</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeOut) <span class="built_in">clearTimeout</span>(timeOut)</span><br><span class="line">        timeOut = <span class="built_in">setTimeout</span>(fn,wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> ceshi = <span class="title function_">antiShake</span>(func, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ceshi</span>()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ceshi</span>()</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ceshi</span>()</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">jieliu</span> = (<span class="params">fn, timeOut</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, timeOut);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//节流   一直提交，每隔time秒执行一次。还可以通过时间戳执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event,time</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">event</span>()</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ceshi2 = <span class="title function_">throttle</span>(func,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="js-函数柯里化"><a href="#js-函数柯里化" class="headerlink" title="js 函数柯里化"></a>js 函数柯里化</h3><p>函数柯里化（Currying）是一种将多个参数的函数转变为接收单一参数的函数序列的过程。通过柯里化，我们可以将多个参数的函数转化为接收一个参数的函数，然后再返回一个新函数，该函数可以继续接收下一个参数，以此类推，直到满足所有参数的条件，最后返回期望的结果。<br>函数柯里化的作用有以下几个方面： 1.参数复用：柯里化允许我们创建可以重复使用的小函数。通过将一个多参数函数转化为接收单一参数的函数，我们可以使用部分应用函数来创建新的函数，并将其应用于具有不同参数的不同上下文中。 2.延迟执行：柯里化也可以用于延迟执行函数。通过转化为接收单一参数的函数序列，我们可以先传递一部分参数，然后在后续需要的时候再传递剩余的参数来执行函数，从而实现函数的延迟执行。 3.函数组合：柯里化可以与函数组合配合使用，实现更复杂的函数操作。通过将多个柯里化函数组合起来，可以实现更高阶的函数组合，从而简化代码并增加代码的可读性。 4.提高函数可测试性：通过柯里化，我们可以将函数的逻辑拆分成多个步骤，并将每个步骤的输入和输出明确化，从而方便进行单元测试。我们可以对每个柯里化函数进行独立测试，而无需考虑其他参数的影响。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//柯里化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum1</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b+c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简化后</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum2</span> = a=&gt;<span class="function"><span class="params">b</span>=&gt;</span><span class="function"><span class="params">c</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c &#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum2</span> = a=&gt;<span class="function"><span class="params">b</span>=&gt;</span><span class="function"><span class="params">c</span>=&gt;</span>a+b+c</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum2</span>(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>))</span><br></pre></td></tr></table></figure>

<p>例题 1：<br>&#x2F;&#x2F;实现 add(1)(4)(3)(…)(n)<br><a href="https://blog.csdn.net/double_sweet1/article/details/122786636">详细</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">    <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        args = [...args, ...<span class="variable language_">arguments</span>];</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//inner本身就是一个函数，因此最后的输出结果就是一个函数，控制台输出的函数是被转换为string类型的字符串了的，转换为string是因为调用了toString方法,所以要改写一下toString方法。</span></span><br><span class="line">    inner.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="js-函数缓存"><a href="#js-函数缓存" class="headerlink" title="js 函数缓存"></a>js 函数缓存</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统函数写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数可以使用剩余参数（rest parameter）的语法，用来表示一个不定长度的参数列表，剩余参数会被收集到一个数组中。例如：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">printArgs</span> = (<span class="params">a, ...restArgs</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出第一个参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(restArgs); <span class="comment">// 输出剩余参数的数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printArgs</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>); <span class="comment">// 输出 &#x27;foo&#x27; 和 [&#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">memoize</span> = (<span class="params">func, content</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//在当前函数作用域定义一个空对象，用于缓存函数的运行结果</span></span><br><span class="line">    <span class="keyword">let</span> cache = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    content = content || <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//运用柯里化返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;concent&#x27;</span>, content);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cache&quot;</span>,cache);</span><br><span class="line">        <span class="keyword">if</span> (!cache[args]) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了:&#x27;</span> , args);</span><br><span class="line">            <span class="comment">//call()和apply()：这两个方法允许你在指定的上下文中调用函数，并传递参数。</span></span><br><span class="line">            <span class="comment">//它们的区别在于传递参数的方式不同。call()方法使用逗号分隔的参数列表，而apply()方法使用一个数组作为参数。</span></span><br><span class="line">            cache[args] = func.<span class="title function_">call</span>(content, ...args);</span><br><span class="line">            <span class="comment">// cache[args] = func.apply(content, args);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">const</span> memoizeAdd = <span class="title function_">memoize</span>(add);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">memoizeAdd</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">memoizeAdd</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">memoizeAdd</span>(<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">memoizeAdd</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在 <span class="title class_">JavaScript</span> 中， [a, b] = [b, a] 这样的语法是一种常见的用法，用于交换两个变量的值。实际上，这种写法利用了解构赋值的特性，可以很方便地交换两个变量的值，而不需要借助临时变量。</span><br><span class="line">具体来说，当执行 [a, b] = [b, a] 这行代码时，会先创建一个临时数组 [b, a]，然后按顺序将这个数组中的值分别赋给变量 a 和 b，从而实现 a 和 b 的值交换。</span><br><span class="line">因此，[a, b] = [b, a] 是一种优雅且简洁的方法来交换两个变量的值，在实际编程中也比较常见。</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div*<span class="number">3</span>&gt;lorem4 <span class="comment">//lorem随机生成字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strNum = <span class="string">&#x27;45&#x27;</span></span><br><span class="line">+str  ---&gt; 快速将字符串数字变成number类型</span><br></pre></td></tr></table></figure>

<h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h3><table>
<thead>
<tr>
<th>调用方式</th>
<th>示例</th>
<th>函数中的 this 指向</th>
</tr>
</thead>
<tbody><tr>
<td>通过 new 调用</td>
<td>new method()</td>
<td>新对象</td>
</tr>
<tr>
<td>直接调用</td>
<td>method()</td>
<td>全局对象</td>
</tr>
<tr>
<td>通过对象调用</td>
<td>obj.method()</td>
<td>前面的对象</td>
</tr>
<tr>
<td>call,apply,bind</td>
<td>method.call(ctx)</td>
<td>第一个参数</td>
</tr>
</tbody></table>
<p>congsole.log()完整的写法是 window.console.log(),window 可以省略，window 调用了 console.log()方法，所以此时 this 指向 window。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="number">222</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123;<span class="attr">id</span>:<span class="number">123</span>&#125;)  <span class="comment">//222</span></span><br><span class="line"><span class="comment">//指向的是外层window</span></span><br></pre></td></tr></table></figure>

<p>call、apply 和 bind 都是用来修改 this 指向的，这三个方法都是函数对象的方法 bind 可自行测试<br>区别：call 和 apply 是立即执行的，而 bind 是不会立即执行的，因为 bind 返回的是函数<br>call()和 bind()可以传递很多实参———————— call(对象，a,b,c,d…)<br>apply()可以传递两个参数，第二个参数是数组 apply(对象，[a,b,c,d…])</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test.<span class="title function_">call</span>(&#123;<span class="attr">id</span>:<span class="number">123</span>&#125;) <span class="comment">//123</span></span><br><span class="line"><span class="comment">//改变this指向</span></span><br></pre></td></tr></table></figure>

<p>另外，箭头函数没有 this</p>
<h3 id="js-取整"><a href="#js-取整" class="headerlink" title="js 取整"></a>js 取整</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>()   <span class="comment">//向0取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()  <span class="comment">//向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()  <span class="comment">//向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">trunc</span>()  <span class="comment">//去除数字的小数部分，保留整数部分</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()  <span class="comment">//返回一个数字四舍五入后的整数部分</span></span><br></pre></td></tr></table></figure>

<h3 id="var-const-let区别"><a href="#var-const-let区别" class="headerlink" title="var const let区别"></a>var const let区别</h3><table>
<thead>
<tr>
<th><strong>区别</strong></th>
<th><strong>var</strong></th>
<th><strong>let</strong></th>
<th><strong>const</strong></th>
</tr>
</thead>
<tbody><tr>
<td>是否有块级作用域</td>
<td>×</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>是否存在变量提升</td>
<td>✔️</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>是否添加全局属性</td>
<td>✔️</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>能否重复声明变量</td>
<td>✔️</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>是否存在暂时性死区</td>
<td>×</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>是否必须设置初始值</td>
<td>×</td>
<td>×</td>
<td>✔️</td>
</tr>
<tr>
<td>能否改变指针指向</td>
<td>✔️</td>
<td>✔️</td>
<td>×</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>vue笔记</title>
    <url>/2024/01/13/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>谈谈你对 vue 的理解</p>
<span id="more"></span>

<h3 id="谈谈你对-vue-的理解"><a href="#谈谈你对-vue-的理解" class="headerlink" title="谈谈你对 vue 的理解"></a>谈谈你对 vue 的理解</h3><p>1.1 声明式框架，单页面应用<br>1.2MVVM 模式<br>1.3 采用虚拟 DOM：传统更新页面，拼接一个完整的字符串 innerHTML 全部重新渲染，添加虚拟 DOM 后，可以比较新旧虚拟节点，找到变化在更新。虚拟 DOM 就是一个对象，用来描述真实 DOM 的。<br>1.4 区分编译时和运行时:<br>vue 的渲染核心就是调用渲染（render）方法将虚拟 DOM 渲染成真实 DOM。<br>1.5 组件化：实现高内聚，低耦合，单项数据流；</p>
<h3 id="谈谈你对-SPA-的理解"><a href="#谈谈你对-SPA-的理解" class="headerlink" title="谈谈你对 SPA 的理解"></a>谈谈你对 SPA 的理解</h3><p>· SPA (single-page application) 单页应用，默认情况下我们编写 Vue、React 都只有一个 html 页面，并且提供一个挂载点，最终打包后会再此页面中引入对应的资源。（页面的渲染全部是由 JS 动态进行渲染的）。切换页面时通过监听路由变化，渲染对应的页面 Client Side Rendering,客户端渲染 CSR.<br>· MPA (Multi-page application) 多页应用，1 多个 htm1 页面。每个页面必须重复加载，js, css 等相关资源。（服务端返回完整的 html，同时数据也可以再后端进行获取一并返回“模板引擎”）。多页应用跳转需要整页资源刷新。Server Side Rendering，服务器端渲染 SSR<br>如何分清在哪渲染：HTML 是在前端动态生成的“客户端渲染”，在服务端处理好并返回的是“服务端渲染”</p>
<p>1.2 优缺点</p>
<table>
<thead>
<tr>
<th>区别</th>
<th>单页面应用(SPA)</th>
<th>多页面应用(MPA)</th>
</tr>
</thead>
<tbody><tr>
<td>组成</td>
<td>一个主页面和页面组件</td>
<td>多个完整的页面</td>
</tr>
<tr>
<td>刷新方式</td>
<td>局部刷新</td>
<td>整页刷新</td>
</tr>
<tr>
<td>SEO 搜索引擎优化</td>
<td>无法实现</td>
<td>容易实现</td>
</tr>
<tr>
<td>页面切换</td>
<td>速度快，用户体验良好</td>
<td>切换加载资源，速度慢，用户体验差</td>
</tr>
<tr>
<td>维护成本</td>
<td>相对容易</td>
<td>相对复杂</td>
</tr>
</tbody></table>
<p>·用户体验好、快，内容的改变不需要重新加载整个页面，服务端压力小。• SPA 应用不利于搜索引擎的抓取。<br>·首次渲染速度相对较慢（第一次返回空的 html,需要再次请求首屏数据）白屏时间长。</p>
<p>1.3 解决方案<br>·静态页面预這染(Static Site Generation) SSG，在构建时生成完整的 html 页面。（就是在打包的时候,，<br>先将页面放到浏览器中运行一下，将 HTML 保存起来），仅适合静态页面网站。变化率不高的网站<br>· SSR + CSR 的方式，首屏采用服务端渲染的方式，后续交互采用客户端渲染方式。NuxtJs</p>
<h3 id="vue-为什么需要虚拟-DOM"><a href="#vue-为什么需要虚拟-DOM" class="headerlink" title="vue 为什么需要虚拟 DOM"></a>vue 为什么需要虚拟 DOM</h3><p>1.1 基本概念<br>基本上所有框架都引入了虚拟 DOM 来对真实 DOM 进行抽象，也就是现在大家所熟知的 VNode 和 VDOM<br>· Virtual DOM 就是用 js 对象来描述真实 DOM，是对真实 DOM 的抽象，由于直接操作 DOM 性能低但是 js 层的操作效率高，可以将 DOM 操作转化成对象操作，最终通过 diff 算法比对差异进行更新 DOM （减少了对真实 DOM 的操作）。<br>·虚拟 DOM 不依赖真实平台环境从而也可以实现跨平台。<br>1.2 补充：VDOM 是如何生成的?<br>·在 vue 中我们常常会为组件编写模板 -template ·这个模板会被编译器编译为渲染函数-render<br>·在接下来的挂载过程中会调用 render 函数，返回的对象就是虚拟 dom ·会在后续的 patch 过程中进一步转化为真实 dom.<br>1.3 再次补充：VDOM 如何做 diff 的?·挂载过程结束后，会记录第一次生成的 VDOM -oldVnode<br>·当响应式数据发生变化时，将会引起组件重新 render，此时就会生成新的 VDOM - newVnode<br>·使用 oldVnode 与 newVnode 做 diff 操作，将更改的部分应到真实 DOM 上，从而转换为最小量的 dom 操作，高效更新视图</p>
<h3 id="Vue2-和-Vue3-响应式原理的区别"><a href="#Vue2-和-Vue3-响应式原理的区别" class="headerlink" title="Vue2 和 Vue3 响应式原理的区别"></a>Vue2 和 Vue3 响应式原理的区别</h3><p>数据劫持和数据代理: 1.数据代理：data 中的写入的数据都会通过加工再生成一份，组件实例对象 vm._data 中存储的就是 data 中的每个属性 get 和 set。然后 name 属性一改 set 就调，set 的原理就是重新再解析模板，模板一解析就生成新的虚拟 dom，然后新旧 dom 进行对比，然后更新页面 响应式原理 2.数据劫持：就是 get 和 set 每个数据身上都有一个 get 和 set 就是为了实现数据的响应式，getter 就是有人读取 data 中的属性就调用 getter，进行数据劫持监视这个属性，set 就是有人修改了_data 中的数据然后就调用 set</p>
<h4 id="1-vue2-的实现原理"><a href="#1-vue2-的实现原理" class="headerlink" title="1.vue2 的实现原理"></a>1.vue2 的实现原理</h4><p>对象类型：通过 Object.defineProperty()对属性的读取，修改进行拦截（数据劫持）。<br>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<p>Object.defineProperty(data, ‘count’, {<br>get() {},<br>set() {}<br>})<br>vue2 中初始化的时候没有给数据，后续添加的都是没有 get 和 set 的;<br>对属性读取能捕获到，对属性修改能捕获到，<br>但是添加一个属性捕获不到，删除一个已有的数据也捕获不到。<br>所以，存在两个问题：<br>a. 新增属性、删除属性，界面不会更新。（$set 或 $delete）<br>b. 直接通过下标修改属性，界面不会自动更新（$set、或数组变更方法）</p>
<p>监听数组时是重写数组的方法来进行监听的。</p>
<h4 id="2-vue3-的实现原理"><a href="#2-vue3-的实现原理" class="headerlink" title="2.vue3 的实现原理"></a>2.vue3 的实现原理</h4><p>Proxy（window 中内置的构造函数）： window.Proxy 直接代理对象<br>Reflect（window 中内置的构造函数</p>
<p>new Proxy() 需要传递两个参数<br>const p &#x3D; new Proxy(person, {}) —&gt; p: 代理数据&#x2F;代理对象 person：源数据&#x2F;源对象<br>注意：第二个参数必传，即使不传内容，也要用{}空对象进行占位。</p>
<p>Proxy (代理) ：拦截对象中任意属性的变化，包括属性值的读取、修改，属性的添加、删除。</p>
<p>Reflect (反射)：对源对象的属性进行操作。 *最重要的是通过 Reflect 来修改源数据，这是和 vue2 中数据响应式最大的区别。如果传统的数据劫持编译中出现错误就会直接停止，不会再执行后面的代码，因为 js 是单线程，而 Reflect 就是为了解决这种情况，就算出现了错误也会执行下面的代码。操作源数据<br>Object.defineProperty() 如果有问题要借助 try {} catch() {}；<br>Reflect.defineProperty() 直接通过判断即可。</p>
<h3 id="vue-的生命周期"><a href="#vue-的生命周期" class="headerlink" title="vue 的生命周期"></a>vue 的生命周期</h3><h4 id="1-创建阶段"><a href="#1-创建阶段" class="headerlink" title="1.创建阶段"></a>1.创建阶段</h4><p>在 beforeCreate 之前：methods 声明；生命周期钩子函数声明。<br>在创建阶段(created)：data 数据注入，data 数据劫持。给每个声明式变量添加 getter&#x2F;setter;把劫持过的变量放在组件实例上。</p>
<h4 id="2-挂载阶段"><a href="#2-挂载阶段" class="headerlink" title="2.挂载阶段"></a>2.挂载阶段</h4><p>在 beforeMount 之前：寻找 template&#x2F;el 模版，把找到的 template 试图模版编译成 render()函数。<br>在挂载阶段(mounted):1.根据 render()渲染函数生成”抽象语法树 AST”,再把 AST 第一次创建成”虚拟 DOM 树”；2.根据虚拟 DOM 树创建真实 DOM 树(第一次接触，依赖收集，watcher 发生在此处)，把声明式变量替换成真实数据，DOM 渲染完成。</p>
<h4 id="3-更新阶段"><a href="#3-更新阶段" class="headerlink" title="3.更新阶段"></a>3.更新阶段</h4><p>在 beforeUpdate 之前：当被劫持的数据发生变化，进入更新阶段。<br>在更新阶段(updated):1.当响应式数据发生变化时，调用 render()函数生成新的虚拟 DOM 树。2.使用 diff 算法，patch(oldVode,newVnode),找出两个 Vnode 的差异点，删除旧的 vnode。3.notify 通过 watcher 根据依赖收集在此处更新真实 DOM.</p>
<h4 id="4-销毁阶段"><a href="#4-销毁阶段" class="headerlink" title="4.销毁阶段"></a>4.销毁阶段</h4><p>beforeDestory&#x2F;destoryed:1.拆掉了 watcher。2.拆掉当前组件的子组件。3.拆掉当前组件的事件处理器。</p>
<h4 id="5-父子组件的生命周期。"><a href="#5-父子组件的生命周期。" class="headerlink" title="5.父子组件的生命周期。"></a>5.父子组件的生命周期。</h4><p>父 beforeCreat&gt;&gt;父 created&gt;&gt;父 beforeMount&gt;&gt;子 beforeCreate&gt;&gt;子 created&gt;&gt;子 beforeMount&gt;&gt;子 mounted&gt;&gt;父 mounted<br>子组件更新过程：父 beforeUpdate&gt;&gt;子 beforeUpdate&gt;&gt;子 updated&gt;&gt;父 updated<br>销毁过程同上</p>
<h3 id="vue-如何进行依赖收集"><a href="#vue-如何进行依赖收集" class="headerlink" title="vue 如何进行依赖收集"></a>vue 如何进行依赖收集</h3><p>.每个属性都拥有自己的 dep 属性，存放他所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去<br>更新<br>·默认在初始化时会调用 render 函数，此时会触发属性依赖收集 dep.depend<br>.当属性发生修改时会触发 watcher 更新 dep.notify()</p>
<p>Vue3 中会通过 Map 结构将属性和 effect 映射起来。<br>·默认在初始化时会调用 render 函数，此时会触发属性依赖收集 track,<br>·当属性发生修改时会找到对应的 effect 列表依次执行 trigger</p>
<h3 id="vue-set-方法是如何实现的"><a href="#vue-set-方法是如何实现的" class="headerlink" title="vue.set 方法是如何实现的"></a>vue.set 方法是如何实现的</h3><h3 id="watch-和-watchEffect-的区别"><a href="#watch-和-watchEffect-的区别" class="headerlink" title="watch 和 watchEffect 的区别?"></a>watch 和 watchEffect 的区别?</h3><p>watchEffect 立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数<br>watch 侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数</p>
<h3 id="如何将-template-转换成-render-函数"><a href="#如何将-template-转换成-render-函数" class="headerlink" title="如何将 template 转换成 render 函数?"></a>如何将 template 转换成 render 函数?</h3><p>Vue 中含有模版编译的功能，它的主要作用是将用户编写的 template 编译为 s 中可执行的 render 函数. 1.将 template 模板转换成 ast 语法树-parserHTML 2.对静态语法做静态标记-markup diff 来做优化的静态节点跳过 diff 操作 3.重新生成代码 codeGen</p>
<h3 id="new-vue-做了什么"><a href="#new-vue-做了什么" class="headerlink" title="new vue()做了什么"></a>new vue()做了什么</h3><p>new Vue 的时候调用会调用_init 方法<br>定义 $set、$get 、$delete、$watch 等方法<br>定义 $on、$off、$emit、$off 等事件<br>定义 _update、$forceUpdate、$destroy 生命周期<br>调用$mount 进行页面的挂载<br>挂载的时候主要是通过 mountComponent 方法<br>定义 updateComponent 更新函数<br>执行 render 生成虚拟 DOM<br>_update 将虚拟 DOM 生成真实 DOM 结构，并且渲染到页面中</p>
<h3 id="v-if-和-v-for-同时使用的优先级"><a href="#v-if-和-v-for-同时使用的优先级" class="headerlink" title="v-if 和 v-for 同时使用的优先级"></a>v-if 和 v-for 同时使用的优先级</h3><p>在 vue2 中 v-for 的优先级高于 v-if，vue3 相反<br>vue2 中 v-if 和 v-for 同时使用会很消耗性能，一般用计算属性代替原数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="title function_">filterArr</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item%<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue-中-diff-算法原理"><a href="#vue-中-diff-算法原理" class="headerlink" title="vue 中 diff 算法原理"></a>vue 中 diff 算法原理</h3><p>diff 算法的核心就是比较两个新旧节点的差异，diff 算法是平级比较，不考虑跨级比较的情况下，内部采用深度递归的方式+双指针进行比较。<br>diff 算法比较流程：</p>
<p>1.先比较是否是相同节点 key tag</p>
<p>2.相同节点比较属性，并复用老节点 （将老的虚拟 dom 复用给新的虚拟节点 DOM)</p>
<p>3.比较儿子节点，考虑老节点和新节点儿子的情况</p>
<p>.老的没儿子，现在有儿子。直接插入新的儿子。 老的有儿子，新的没儿子。直接删除页面节点</p>
<p>.老的儿子是文本，新的儿子是文本，直接更新文本节点即可</p>
<p>.老的儿子是一个列表，新的儿子也是一个列表 updateChildren</p>
<p>4.优化比较：头头、尾尾、头尾、尾头</p>
<p>5.比对查找进行复用</p>
<p>Vue3 中采用最长递增子序列来实现 diff 优化</p>
<h3 id="key-作用"><a href="#key-作用" class="headerlink" title="key 作用"></a>key 作用</h3><p>key 的特殊 arttribute 主要用在 vue 的虚拟 DOM 算法，在新旧的 vnode 节点比较时，如果不使用 key，vue 会使用一种最大限度减少动态元素并且尽量就地修改。</p>
<p>当 vue 使用 v-for 渲染列表时，他默认使用就地更改策略。</p>
<p>作用：<br>vue 在 patch 过程中通过 key 可以判断两个节点是否是相同节点，尽量不要用索引当 key</p>
<h3 id="Vue-extend-方法的作用？"><a href="#Vue-extend-方法的作用？" class="headerlink" title="Vue.extend()方法的作用？"></a>Vue.extend()方法的作用？</h3><p>概念：<br>创建一个子类，参数是包含子件选项的对象；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个组件构造器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="comment">// 组件的选项</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用组件构造器创建一个实例</span></span><br><span class="line"><span class="keyword">const</span> myComponentInstance = <span class="keyword">new</span> <span class="title class_">MyComponent</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载实例到某个元素上</span></span><br><span class="line">myComponentInstance.$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所有组件创建时都会调用 Vue.extend()进行创建。<br>此方法可以手动挂载组件。<br>后端储存的字符串模版可以通过此方法进行渲染，但是需要引入编译时。</p>
<h3 id="Vue-use-是干什么的？"><a href="#Vue-use-是干什么的？" class="headerlink" title="Vue.use 是干什么的？"></a>Vue.use 是干什么的？</h3><p>在 Vue.js 中，Vue.use() 是用来安装 Vue.js 插件的方法。Vue.js 插件通常是一个包含 install 方法的 JavaScript 对象，该方法用于在 Vue 实例中添加全局功能或第三方库。 1.安装插件：调用插件对象的 install 方法，并将 Vue 构造函数作为参数传入。这样，插件就可以在 Vue 实例中注册全局组件、指令、混入等功能。 2.避免重复安装：Vue.js 会阻止插件多次安装同一个插件，因此即使在多个地方多次调用 Vue.use() 也只会安装一次。</p>
<h3 id="vue-中的-data-为什么必须是个函数？"><a href="#vue-中的-data-为什么必须是个函数？" class="headerlink" title="vue 中的 data 为什么必须是个函数？"></a>vue 中的 data 为什么必须是个函数？</h3><p>确保每个组件实例都拥有独立的数据对象，从而避免不同组件实例之间共享同一个数据对象所导致的数据混乱和难以追踪的问题。防止数据污染。<br>当 data 选项被定义为一个函数时，每次创建组件实例时，Vue.js 都会调用该函数来返回一个全新的数据对象，这样每个组件实例都拥有自己独立的数据对象，相互之间不会产生影响。这种方式保证了组件的数据在组件实例之间的隔离性，使得组件可以更加可靠地进行状态管理。</p>
<p>如果 data 选项直接是一个对象而不是一个函数，那么这个对象将会被所有组件实例共享，当一个组件实例修改了其中的数据时，其他组件实例也会受到影响，导致不可预料的结果。这种共享数据对象的方式不利于组件之间的独立性和可维护性，容易造成代码逻辑混乱和难以调试。</p>
<h3 id="vue-中的过滤器？及其应用场景"><a href="#vue-中的过滤器？及其应用场景" class="headerlink" title="vue 中的过滤器？及其应用场景"></a>vue 中的过滤器？及其应用场景</h3><p>允许你在模板中使用管道符（|）来应用过滤器，并对要显示的数据进行处理，从而改变它的展示形式。过滤器可以用于处理文本、日期、数字等各种类型的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 使用内置的 uppercase 过滤器将文本转换为大写 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message | uppercase &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 使用自定义的 currency 过滤器格式化金额 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; amount | currency &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterA&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">#   <span class="comment">//返回处理后的值</span></span><br><span class="line"># &#125;)</span><br><span class="line"># <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterB&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">#   <span class="comment">//返回处理后的值</span></span><br><span class="line"># &#125;)</span><br><span class="line"><span class="comment">// 定义 Vue 实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hello, vue!&#x27;</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义过滤器：将金额转换为货币格式</span></span><br><span class="line">    <span class="title function_">currency</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + value.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在 Vue.js 3 中，虽然过滤器的概念仍然存在，但是其用法已经有了较大的变化。Vue.js 3 推荐的更现代的方式是使用函数或计算属性来代替过滤器。这是因为 Vue.js 3 引入了 Composition API（组合式 API），使得组件内部的逻辑更加灵活和可复用，而过滤器的功能可以通过组合式 API 更好地实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; uppercaseMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; formattedAmount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;hello, vue!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> amount = <span class="title function_">ref</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用计算属性来转换文本为大写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> uppercaseMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> message.<span class="property">value</span>.<span class="title function_">toUpperCase</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用计算属性来格式化金额为货币形式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> formattedAmount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;$&#x27;</span> + amount.<span class="property">value</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      uppercaseMessage,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      formattedAmount</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="v-once-使用场景"><a href="#v-once-使用场景" class="headerlink" title="v-once 使用场景"></a>v-once 使用场景</h3><p>用于执行一次性地将元素和组件的内容渲染一次，并且不再对其进行响应式更新。这意味着，一旦数据发生变化，使用了 v-once 的元素或组件的内容将不再更新。<br>v-once 主要用于那些不需要响应式更新的静态内容，以提高性能并避免不必要的重新渲染。例如，在展示一些静态数据，或者某些只需要初始化一次的内容时，可以考虑使用 v-once。</p>
<p>在 vue3.2 之后又加了 v-memo 指令,只有限定的值发生改变才会更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div v-memo=<span class="string">&quot;[valueA,B]&quot;</span>&gt;</span><br><span class="line">&lt;..&gt;...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure>

<h3 id="Vue-mixin-的使用场景及原理"><a href="#Vue-mixin-的使用场景及原理" class="headerlink" title="Vue.mixin 的使用场景及原理"></a>Vue.mixin 的使用场景及原理</h3><p>mixin（混入），提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。<br>本质其实就是一个 js 对象，它可以包含我们组件中任意功能选项，如 data、components、methods、created、computed 等等<br>我们只要将共用的功能以对象的方式传入 mixins 选项中，当组件使用 mixins 对象时所有 mixins 对象的选项都将被混入该组件本身的选项中来</p>
<p>1.局部混入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 定义一个mixin对象</span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 组件通过mixins属性调用mixin对象</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;componentA&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"># 该组件在使用的时候，混合了mixin里面的方法，在自动执行created生命钩子，执行hello方法</span><br></pre></td></tr></table></figure>

<p>2.全局混入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 通过<span class="title class_">Vue</span>.<span class="title function_">mixin</span>()进行全局的混入</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局混入&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"># 使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件）</span><br><span class="line"># <span class="variable constant_">PS</span>：全局混入常用于插件的编写</span><br></pre></td></tr></table></figure>

<p>注意：<br>当组件存在与 mixin 对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖 mixin 的选项<br>但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行 mixin 的钩子，再执行组件的钩子</p>
<p>（1）使用场景：<br>在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立<br>这时，可以通过 Vue 的 mixin 功能将相同或者相似的代码提出来</p>
<p>（2）源码分析：<br>优先递归处理 mixins<br>先遍历合并 parent 中的 key，调用 mergeField 方法进行合并，然后保存在变量 options<br>再遍历 child，合并补上 parent 中没有的 key，调用 mergeField 方法进行合并，保存在变量 options<br>通过 mergeField 函数进行了合并</p>
<p>合并策略：替换型，合并型，队列型，叠加型 1.替换型合并有 props、methods、inject、computed，同名的 props、methods、inject、computed 会被后来者代替。 2.合并型合并有：data。当目标 data 对象不包含当前属性时，调用 set 方法进行合并（set 方法其实就是一些合并重新赋值的方法）当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性 3.队列型合并有：全部 生命周期 和 watch 被合并为一个数组，然后正序遍历一次执行。先执行 mixin 的钩子，再执行组件的钩子 4.叠加型有 component、directives、filters，通过原型链进行层层的叠加</p>
]]></content>
  </entry>
  <entry>
    <title>js数据结构与算法</title>
    <url>/2024/01/12/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>js基本数据类型,js中的Object, Array 的方法,栈数据结构</p>
<span id="more"></span>

<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="Array-的方法"><a href="#Array-的方法" class="headerlink" title="Array 的方法"></a>Array 的方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>() <span class="comment">//数组末尾追加</span></span><br><span class="line">arr.<span class="title function_">pop</span>()  <span class="comment">//数组末尾删除一个，返回删除值</span></span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line">arr.<span class="title function_">unshift</span>()</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">//删除数组前两个</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">//选择数组前两个</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>) <span class="comment">//数组前两个换成一个5</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x-y)  <span class="comment">//正序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">x,y</span>)=&gt;</span>y-x)  <span class="comment">//倒序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">x,y</span>)=&gt;</span>y.<span class="property">age</span>-x.<span class="property">age</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">arr1.<span class="title function_">concat</span>(arr2)  <span class="comment">//数组追加</span></span><br><span class="line">arr1.<span class="title function_">concat</span>(arr2,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用slice()方法返回一个子数组，在进行reverse； 不会改变原数组</span></span><br><span class="line">time1 = time.<span class="title function_">slice</span>().<span class="title function_">reverse</span>()  <span class="comment">//time1数组反转  time数组不变</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line"><span class="keyword">let</span> res1 = arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">10</span>)   <span class="comment">//判断数组中每一个元素是否都大于10，返回true或false</span></span><br><span class="line"><span class="keyword">let</span> res2 = arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">10</span>)    <span class="comment">//判断数组中是否有一个元素大于10，返回true或false</span></span><br><span class="line"><span class="keyword">let</span> res3 = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">11</span>)  <span class="comment">//把符合条件的过滤出来</span></span><br><span class="line"><span class="keyword">let</span> res4 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item+<span class="string">&quot;aaa&quot;</span>)  <span class="comment">//数组每一项都加“aaa”</span></span><br><span class="line"><span class="keyword">let</span> res5 = arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item,index)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> res6 = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item1,item2</span>)=&gt;</span>item1+item2)  <span class="comment">//item1是上一次的，item是这一次的。这个实现的是数组累加</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>()  <span class="comment">//把类似数组结构的数据转换成数组</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">15</span>))  <span class="comment">//判断是否包含15，不包含返回-1，包含返回0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">15</span>))  <span class="comment">//判断是否包含15，不包含返回false，包含返回true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">10</span>)  <span class="comment">//返回数组中第一个符合条件的值</span></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">10</span>)  <span class="comment">//返回数组中第一个符合条件的值的索引值</span></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">findLast</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">10</span>)  <span class="comment">//返回数组中最后一个符合条件的值</span></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">findLastIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">10</span>)  <span class="comment">//返回数组中最后一个符合条件的值的索引值</span></span><br></pre></td></tr></table></figure>

<h3 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个栈类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 入栈操作</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 出栈操作</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;栈为空，无法出栈&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取栈顶元素</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>[<span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断栈是否为空</span></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取栈的大小</span></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用栈</span></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="comment">// 入栈操作</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 出栈操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">pop</span>()); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">peek</span>()); <span class="comment">// 输出: 2</span></span><br><span class="line"><span class="comment">// 获取栈的大小</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">size</span>()); <span class="comment">// 输出: 2</span></span><br><span class="line"><span class="comment">// 清空栈</span></span><br><span class="line">stack.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">size</span>()); <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="队列结构"><a href="#队列结构" class="headerlink" title="队列结构"></a>队列结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 入队，在队尾添加一个元素</span></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 出队，移除队首元素并返回</span></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Queue is empty&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回队首元素</span></span><br><span class="line">  <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;No elements in Queue&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断队列是否为空</span></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回队列大小</span></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清空队列</span></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">front</span>()); <span class="comment">// 输出：1</span></span><br><span class="line">queue.<span class="title function_">dequeue</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">front</span>()); <span class="comment">// 输出：2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>()); <span class="comment">// 输出：2</span></span><br><span class="line">queue.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">isEmpty</span>()); <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure>

<h2 id="详解-JS-中的-Object"><a href="#详解-JS-中的-Object" class="headerlink" title="详解 JS 中的 Object"></a>详解 JS 中的 Object</h2><h3 id="1-Object-构造函数的属性"><a href="#1-Object-构造函数的属性" class="headerlink" title="1.Object 构造函数的属性"></a>1.Object 构造函数的属性</h3><p>在 Object 中声明的属性只有两个：<br>Object.length —— 值为 1<br>Object.prototype —— 指向 Object 函数的原型对象</p>
<h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h3><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p>作用：将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。<br>简单来说，该方法可以接收多个参数，其中第一个参数作为目标对象，剩下的都是源对象。该方法将所有源对象的可枚举属性复制（浅复制）到目标对象中，结果返回目标对象。该方法会直接改变目标对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> source = &#123;<span class="attr">address</span>:<span class="string">&quot;sz&quot;</span>,<span class="attr">gender</span>:<span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target,source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target);<span class="comment">//&#123;name: &quot;test&quot;, sex: 1, address: &quot;sz&quot;, gender: &quot;male&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">如果使用 <span class="title class_">ES6</span> 的语法来实现这种需求就很简洁了：</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123;<span class="attr">address</span>:<span class="string">&quot;sz&quot;</span>,<span class="attr">gender</span>:<span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">target = &#123;...target,...source&#125;</span><br></pre></td></tr></table></figure>

<p>…是 ES6 的展开运算符，展开运算符的写法与 obj2 &#x3D; obj1 直接赋值的写法的区别在于如果直接赋值的话，对于引用类型来说，相当于只是赋值了 obj1 的内存空间地址，当 obj2 发生改变的时候，obj1 也会随着发生改变。而是用展开运算符写法的话，由于 obj1 对象中的属性类型都是基本类型，相当于重新创建了一个对象，此时 obj2 发生改变的时候，并不会影响 obj1 这个对象。但是仅限于其属性都为基本类型的情况（或者说只进行了一层的深拷贝）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line"> <span class="attr">value1</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">value2</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<!-- [ES5 和 ES6 区别](https://www.jb51.net/javascript/285980s5x.html) -->

<h4 id="Object-create-proto-propertiesObject"><a href="#Object-create-proto-propertiesObject" class="headerlink" title="Object.create(proto,propertiesObject)"></a>Object.create(proto,propertiesObject)</h4><p>该方法用于创建新对象。第一个参数用于指定新建对象的原型对象；第二个参数是对象的属性描述对象。方法返回新建的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>,&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)<span class="comment">//Person &#123;name: &quot;test&quot;, age: 1&#125;</span></span><br><span class="line">person.<span class="title function_">hello</span>()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure>

<h4 id="Object-defineProperty-obj-prop-desc"><a href="#Object-defineProperty-obj-prop-desc" class="headerlink" title="Object.defineProperty(obj,prop,desc)"></a>Object.defineProperty(obj,prop,desc)</h4><p>在对象 obj 上定义新的属性，或者修改对象 obj 中的属性，结果返回对象 obj。第一个参数 obj 是目标对象，第二个参数 prop 是属性键名，第三个参数是这个属性的描述符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">    value : <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="comment">//value —— 该属性的值，默认值为 undefined</span></span><br><span class="line">    writable : <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//writable —— 布尔值，默认值为 false，表示是否能重写。</span></span><br><span class="line">    enumerable : <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//enumerable —— 布尔值，默认值为 false。表示是否能枚举</span></span><br><span class="line">    configurable : <span class="literal">true</span></span><br><span class="line">    <span class="comment">//configurable —— 布尔值，默认值为 false 。若值为 true，则表示这个属性描述符可以被改变，同时该属性也能从对象上删除。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get:function —— 默认值为 undefined，当访问该属性时，该方法会被执行。</span></span><br><span class="line">    <span class="comment">//set:function —— 默认值为 undefined，当属性修改时，触发执行改方法，该方法接收一个参数，就是该属性新的值。</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)<span class="comment">//&#123;name: &quot;test&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Object-entries-obj"><a href="#Object-entries-obj" class="headerlink" title="Object.entries(obj)"></a>Object.entries(obj)</h4><p>该方法返回对象 obj 自身的可枚举属性的键值对数组。结果是一个二维数组，数组中的元素是一个由两个元素 key ，value 组成的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Object</span>.<span class="title function_">entries</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[[&quot;name&quot;, &quot;test&quot;],[&quot;sex&quot;, 1]]</span></span><br></pre></td></tr></table></figure>

<p>该方法的使用场景是：将普通的对象转换为 Map：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map)<span class="comment">//Map(2) &#123;&quot;name&quot; =&gt; &quot;test&quot;, &quot;sex&quot; =&gt; 1&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Object-freeze-obj"><a href="#Object-freeze-obj" class="headerlink" title="Object.freeze(obj)"></a>Object.freeze(obj)</h4><p>该方法用于冻结对象，一个被冻结的对象不能被修改，不能添加新的属性，不能修改属性的描述符，该对象的原型对象也不能修改。返回值为被冻结的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person)</span><br><span class="line">person.<span class="property">address</span> = <span class="string">&quot;sz&quot;</span></span><br><span class="line">person.<span class="property">sex</span>= <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)<span class="comment">//&#123;name: &quot;test&quot;, sex: 1&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Object-getPrototypeOf-obj"><a href="#Object-getPrototypeOf-obj" class="headerlink" title="Object.getPrototypeOf(obj)"></a>Object.getPrototypeOf(obj)</h4><p>该方法返回指定对象的原型对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person)</span><br><span class="line">proto.<span class="title function_">hello</span>()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure>
<h4 id="Object-is-obj1-obj2"><a href="#Object-is-obj1-obj2" class="headerlink" title="Object.is(obj1,obj2)"></a>Object.is(obj1,obj2)</h4><p>该方法用于比较两个对象是否相同，返回布尔值。</p>
<h4 id="Object-getOwnPropertyDescriptor-obj-prop"><a href="#Object-getOwnPropertyDescriptor-obj-prop" class="headerlink" title="Object.getOwnPropertyDescriptor(obj,prop)"></a>Object.getOwnPropertyDescriptor(obj,prop)</h4><p>该方法用于返回指定对象上自有属性对应的属性描述符。</p>
<h4 id="Object-getOwnPropertySymbols-obj"><a href="#Object-getOwnPropertySymbols-obj" class="headerlink" title="Object.getOwnPropertySymbols(obj)"></a>Object.getOwnPropertySymbols(obj)</h4><p>该方法返回一个指定对象自身所有的 Symbol 键名的属性的数组。</p>
<p><a href="https://blog.csdn.net/local_752/article/details/125640843">参考</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vue双向绑定原理</title>
    <url>/2023/12/29/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>vue 双向绑定原理</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue双向绑定原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>名字：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好： &#123;&#123; more.like.me &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;more.like.me&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">more</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">like</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                       <span class="attr">me</span>: <span class="string">&#x27;学习&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1、使用递归和【Object.defineProperty】的方式，对数据进行劫持：【Observer函数】</span></span><br><span class="line"><span class="comment">* getter函数和setter函数是数据监听的核心。可以获取属性值、监听数据的变化并对新属性值进行赋值修改</span></span><br><span class="line"><span class="comment">* 递归是对子属性值进行递归，和对修改后的新值进行递归。</span></span><br><span class="line"><span class="comment">* 2、【HTML模板解析】，将更新的数据更新到DOM上：</span></span><br><span class="line"><span class="comment">* 通过创建文档碎片来设置临时内存区域，并将DOM节点添加到文档碎片上。</span></span><br><span class="line"><span class="comment">* 匹配插值语法获取到属性名，并通过链式调用的方式获取属性对应的值。</span></span><br><span class="line"><span class="comment">* 将插值语法中的内容替换成属性值，最后将文档碎片应用到DOM上。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 以上操作是通过数据劫持，将数据应用到视图上。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 接着就是要实现，当数据data发生变化的时候，视图DOM也会随之改变</span></span><br><span class="line"><span class="comment">* 3、【发布者-订阅者模式】，通过这种模式订阅者就知道将来如何更新自己。</span></span><br><span class="line"><span class="comment">* 在替换文档碎片时，创建订阅者Watcher实例，告诉订阅者如何更新，往后进行回调的时候，订阅者就知道如何更新自己了。</span></span><br><span class="line"><span class="comment">* 在获取属性之前创建Dependency实例，并在数据劫持获取数据的时候，将订阅者加入依赖实例的数组中。</span></span><br><span class="line"><span class="comment">* 然后在数据劫持修改数据的时候，通知订阅者去更新数据。以上操作完成了对文档的绑定。</span></span><br><span class="line"><span class="comment">* 接下来就是完成输入框的绑定。找到输入框节点，并获取v-model对应的属性名。然后通过属性名就可以赋值它的属性值了。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 这个时候，就已经实现了数据改变视图的逻辑。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 接下来就是要实现用视图改变数据：</span></span><br><span class="line"><span class="comment">* 通过addEventListener监听输入框节点的input，然后把获取到的值【赋值】给属性名就可以了，也就是给Vue实例上的数据赋值。</span></span><br><span class="line"><span class="comment">* 以上操作就完成了双向数据绑定。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">obj_instance</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$data</span> = obj_instance.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 数据劫持：监听data中属性的变化，将有更新的属性更新到DOM中</span></span><br><span class="line">       <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// HTML模板解析：应用Vue数据，渲染页面</span></span><br><span class="line">       <span class="comment">// 第一个参数：Vue实例挂载的元素</span></span><br><span class="line">       <span class="comment">// 第二个参数: Vue实例</span></span><br><span class="line">       <span class="title class_">Compile</span>(obj_instance.<span class="property">el</span>, <span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 发布者-订阅者模式</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听实例中的数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">data_instance</span>) &#123;</span><br><span class="line">   <span class="comment">// 递归出口</span></span><br><span class="line">   <span class="keyword">if</span> (!data_instance || <span class="keyword">typeof</span> data_instance !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建Dependency实例</span></span><br><span class="line">   <span class="keyword">const</span> dependency = <span class="keyword">new</span> <span class="title class_">Dependency</span>()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 监听对象中每个属性的变化</span></span><br><span class="line">   <span class="comment">// Object.keys(data_instance)以数组的方式返回data对象里面的每一个属性</span></span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(data_instance).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 必须先存着，否则进入getter函数后数据会被置为undefined</span></span><br><span class="line">       <span class="keyword">let</span> value = data_instance[key]</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 递归：子属性数据劫持</span></span><br><span class="line">       <span class="title class_">Observer</span>(value)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 双向绑定的核心点1：Object.defineProperty()</span></span><br><span class="line">       <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data_instance, key, &#123;</span><br><span class="line">           <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 属性可枚举</span></span><br><span class="line">           <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 属性描述符可被改</span></span><br><span class="line">           <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="comment">// console.log(&#x27;getter函数获取当前属性为&#x27;, key, &#x27;的值：&#x27;, value)</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">// 验证订阅者已经被添加</span></span><br><span class="line">               <span class="title class_">Dependency</span>.<span class="property">temp</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取到Dependency的临时属性&#x27;</span>, <span class="title class_">Dependency</span>.<span class="property">temp</span>)</span><br><span class="line">               <span class="comment">// 将订阅者加入依赖实例的数组</span></span><br><span class="line">               <span class="title class_">Dependency</span>.<span class="property">temp</span> &amp;&amp; dependency.<span class="title function_">addSub</span>(<span class="title class_">Dependency</span>.<span class="property">temp</span>)</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 返回属性对应的值</span></span><br><span class="line">               <span class="keyword">return</span> value</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter函数修改当前属性为&#x27;</span>, key, <span class="string">&#x27;的值为：&#x27;</span>, newValue)</span><br><span class="line">               value = newValue</span><br><span class="line">               <span class="comment">// 如果newValue传入的是对象，那也需要进行数据劫持的操作</span></span><br><span class="line">               <span class="title class_">Observer</span>(newValue)</span><br><span class="line">               <span class="comment">// 修改数据的时候通知订阅者去更新</span></span><br><span class="line">               dependency.<span class="title function_">notify</span>()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML模板解析</span></span><br><span class="line"><span class="comment">// 获取页面元素-放入临时内存区域【存放所有已更新的数据，避免每更新一次就渲染一次DOM】-应用Vue数据-渲染页面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Compile</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">   <span class="comment">// 获取页面元素</span></span><br><span class="line">   vm.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建文档碎片，设置临时内存区域（临时接受DOM元素）</span></span><br><span class="line">   <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 循环子节点，将其添加到文档碎片上</span></span><br><span class="line">   <span class="keyword">let</span> child;</span><br><span class="line">   <span class="keyword">while</span> (child = vm.<span class="property">$el</span>.<span class="property">firstChild</span>) &#123;</span><br><span class="line">       fragment.<span class="title function_">append</span>(child)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文档碎片&#x27;</span>, fragment.<span class="property">childNodes</span>)</span><br><span class="line"></span><br><span class="line">   <span class="title function_">fragmentCompile</span>(fragment)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将修改的内容应用到文档碎片中，并将其渲染在页面上</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fragmentCompile</span>(<span class="params">node</span>) &#123;</span><br><span class="line">       <span class="comment">// 文本节点类型</span></span><br><span class="line">       <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">           <span class="keyword">const</span> xxx = node.<span class="property">nodeValue</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 匹配插值语法</span></span><br><span class="line">           <span class="keyword">const</span> pattern = <span class="regexp">/\&#123;\&#123;\s*(\S+)\s*\&#125;\&#125;/</span> <span class="comment">// &#123;&#123; name &#125;&#125;</span></span><br><span class="line">           <span class="comment">// exec方法是用于检测字符串中正则表达式的匹配</span></span><br><span class="line">           <span class="keyword">const</span> resultRegex = pattern.<span class="title function_">exec</span>(node.<span class="property">nodeValue</span>)</span><br><span class="line">           <span class="keyword">if</span> (resultRegex) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;索引为1的才是剔除大括号和空格之后得到的属性名：&#x27;</span>, resultRegex[<span class="number">1</span>])</span><br><span class="line">               <span class="keyword">const</span> arr = resultRegex[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>) <span class="comment">// 将字符串转换为数组</span></span><br><span class="line">               <span class="comment">// 链式调用this.data，获取属性里子属性的值</span></span><br><span class="line">               <span class="keyword">const</span> value = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre[cur], vm.<span class="property">$data</span>)</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正则匹配结果对应的属性值&#x27;</span>, value)</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 将插值语法中的内容替换成获取到的属性的值</span></span><br><span class="line">               <span class="comment">// replace方法第一个参数是匹配的内容，第二个参数是用什么值替换内容</span></span><br><span class="line">               node.<span class="property">nodeValue</span> = xxx.<span class="title function_">replace</span>(pattern, value)</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目前文本&#x27;</span>, node.<span class="property">nodeValue</span>)</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 创建订阅者</span></span><br><span class="line">               <span class="comment">// 为的是在数据更新的时候，订阅者知道更新自己</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, resultRegex[<span class="number">1</span>], <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">                   node.<span class="property">nodeValue</span> = xxx.<span class="title function_">replace</span>(pattern, newValue)</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 输入框节点类型</span></span><br><span class="line">       <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span> &amp;&amp; node.<span class="property">nodeName</span> === <span class="string">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class="line">           <span class="comment">// 将node.attributes转化为数组，去除多余的信息</span></span><br><span class="line">           <span class="keyword">const</span> attrArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(node.<span class="property">attributes</span>)</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;节点属性&#x27;</span>, attrArr)</span><br><span class="line">           attrArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (item.<span class="property">nodeName</span> === <span class="string">&#x27;v-model&#x27;</span>) &#123;</span><br><span class="line">                   <span class="comment">// item.nodeValue对应的是属性名 &#x27;name&#x27;和 &#x27;more.like.me&#x27;</span></span><br><span class="line">                   <span class="keyword">const</span> value = item.<span class="property">nodeValue</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre[cur], vm.<span class="property">$data</span>)</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输入框类型对应的值&#x27;</span>, value)</span><br><span class="line">                   node.<span class="property">value</span> = value</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// 创建订阅者</span></span><br><span class="line">                   <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, item.<span class="property">nodeValue</span>, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">                       node.<span class="property">value</span> = newValue</span><br><span class="line">                   &#125;)</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// 监听输入框输入</span></span><br><span class="line">                   node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                       <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">                       <span class="comment">// [&#x27;more&#x27;, &#x27;like&#x27;, &#x27;me&#x27;]</span></span><br><span class="line">                       <span class="keyword">let</span> keys = item.<span class="property">nodeValue</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                       <span class="comment">// [&#x27;more&#x27;, &#x27;like&#x27;]</span></span><br><span class="line">                       <span class="keyword">let</span> frontKeys = keys.<span class="title function_">slice</span>(<span class="number">0</span>, keys.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">                       <span class="comment">// [&#x27;me&#x27;]</span></span><br><span class="line">                       <span class="keyword">let</span> endKey = keys[keys.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">                       <span class="comment">// vm.$data.more.like.me</span></span><br><span class="line">                       <span class="keyword">let</span> newKeys = frontKeys.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">                           <span class="variable language_">console</span>.<span class="title function_">log</span>(pre, cur)</span><br><span class="line">                           <span class="keyword">return</span> pre[cur]</span><br><span class="line">                       &#125;, vm.<span class="property">$data</span>)</span><br><span class="line">                       <span class="comment">// 赋值</span></span><br><span class="line">                       newKeys[endKey] = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 递归子节点</span></span><br><span class="line">       node.<span class="property">childNodes</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> <span class="title function_">fragmentCompile</span>(child))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将文档碎片应用到DOM上</span></span><br><span class="line">   vm.<span class="property">$el</span>.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖-收集和通知订阅者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dependency</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// 存放订阅者信息</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">subscribers</span> = []</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 添加订阅者</span></span><br><span class="line">   <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">subscribers</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 通知订阅者</span></span><br><span class="line">   <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">subscribers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> sub.<span class="title function_">update</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅者: 将来如何更新自己</span></span><br><span class="line"><span class="comment">// 什么时候创建订阅者实例：在修改文档内容的时候（模板解析时）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">   <span class="comment">// vm代表Vue实例，key代表Vue实例上的属性名，callback记录如何更新文本内容</span></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">vm, key, callback</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 为了把订阅者实例存储到Dependency实例里的数组中</span></span><br><span class="line">       <span class="comment">// 巧妙涉及：为Dependency这个类设置临时属性temp，将订阅者实例赋值给这个临时属性</span></span><br><span class="line">       <span class="comment">// 根据作用域的功能，可以最大限度的访问这个临时属性</span></span><br><span class="line">       <span class="title class_">Dependency</span>.<span class="property">temp</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 为了触发getter的时候来添加订阅者到订阅者数组中（具体操作看Observer里面的getter方法）</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用属性 &#x27;</span>, key, <span class="string">&#x27; 创建订阅者&#x27;</span>)</span><br><span class="line">       key.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre[cur], vm.<span class="property">$data</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 为了防止订阅者多次被加入到依赖实例数组中</span></span><br><span class="line">       <span class="title class_">Dependency</span>.<span class="property">temp</span> = <span class="literal">null</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 发布者通知订阅者更新</span></span><br><span class="line">   <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">key</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre[cur], <span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">$data</span>)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">callback</span>(value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>css笔记</title>
    <url>/2023/10/01/css%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>position 布局，transform 的基本使用和常用特效，display 常用方法,外边距塌陷,css 中的伪类：before 与 after</p>
<span id="more"></span>

<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p><strong>Position 的属性值有：</strong><br>1.Absolute：绝对定位，是相对于最近的且不是 static 定位的父元素来定位<br>2.Fixed：绝对定位，是相对于浏览器窗口来定位的，是固定的，不会跟屏幕一起滚动。<br>3.Relative：相对定位，是相对于其原本的位置来定位的。<br>4.Static：默认值，没有定位。<br>5.Inherit：继承父元素的 position 值</p>
<h2 id="transform-的基本使用和常用特效"><a href="#transform-的基本使用和常用特效" class="headerlink" title="transform 的基本使用和常用特效"></a>transform 的基本使用和常用特效</h2><h3 id="1-平移"><a href="#1-平移" class="headerlink" title="1.平移"></a>1.平移</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* x表示x轴移动的坐标，y表示y轴移动的坐标 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">30px</span>, <span class="number">30px</span>);</span><br><span class="line"><span class="comment">/* x轴移动的坐标，y轴不变  */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">30px</span>);</span><br><span class="line"><span class="comment">/* y轴移动的坐标，x轴不变  */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line"><span class="comment">/* 百分比参照的单位是自身的宽高，在这里也就是100px; */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>, <span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-旋转"><a href="#2-旋转" class="headerlink" title="2.旋转"></a>2.旋转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* deg相当于度单位，表示旋转45度; */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid brown;</span><br><span class="line">  <span class="comment">/*不要上边框和左边框后旋转45度即可*/</span></span><br><span class="line">  <span class="attribute">border-top</span>: none;</span><br><span class="line">  <span class="attribute">border-left</span>: none;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>; <span class="comment">/*设置transform动画效果时间*/</span></span><br><span class="line">  <span class="comment">/* transform-origin设置旋转中心点 */</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: bottom left;</span><br><span class="line">  <span class="comment">/* transform-origin: 50px 50px;  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">225deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-缩放"><a href="#3-缩放" class="headerlink" title="3.缩放"></a>3.缩放</h3><p>不会影响其他盒子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: transform <span class="number">0.7s</span>; <span class="comment">/* 设置transform动画效果时间*/</span></span><br><span class="line"><span class="selector-class">.first</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 表示xy的倍数，小于1的为缩小，大于1为放大 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 也可以写成一个表示xy比例一样 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-倾斜"><a href="#4-倾斜" class="headerlink" title="4.倾斜"></a>4.倾斜</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>, <span class="number">30deg</span>);</span><br><span class="line"><span class="comment">/* 一个参数时：表示水平方向的倾斜角度。 */</span></span><br><span class="line"><span class="comment">/* 两个参数时：第一个参数表示水平方向的倾斜角度，第二个参数表示垂直方向的倾斜角度 。 */</span></span><br><span class="line"><span class="comment">/* skew 的默认原点 transform-origin 是这个物件的中心点。 */</span></span><br></pre></td></tr></table></figure>

<h3 id="5-transform-动画效果"><a href="#5-transform-动画效果" class="headerlink" title="5.transform 动画效果"></a>5.transform 动画效果</h3><p><a href="https://code84.com/727426.html">详情</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: transform <span class="number">0.2s</span> ease-in-out;</span><br></pre></td></tr></table></figure>

<h2 id="transform-的基本使用和常用特效-1"><a href="#transform-的基本使用和常用特效-1" class="headerlink" title="transform 的基本使用和常用特效"></a>transform 的基本使用和常用特效</h2><p>1.animation：动画 2.*animation-name：关键帧的名字，该参数必需。 3.*animation-duration：动画持续的时间，该参数必需。<br>4.animation-timing-function：定时器函数，默认是 ease。<br>5.animation-delay：动画效果多少秒后开始，默认为 0。<br>6.animation-iteration-count：动画重复的次数，可以指定为一个整数，表示多少次，默认值是 infinite 关键字，表示无限次。<br>7.animation-direction：动画方向，可能的值为 forward、backward 或 alternating，默认值为 normal。<br>8.animation-fill-mode：默认值为 none。<br>9.animation-play-state：动画默认是否生效，默认值为 running。</p>
<h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myname &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">keyframes rotation &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">450deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="display-常用方法"><a href="#display-常用方法" class="headerlink" title="display 常用方法"></a>display 常用方法</h2><h3 id="1-flex-布局"><a href="#1-flex-布局" class="headerlink" title="1.flex 布局"></a>1.flex 布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: <span class="comment">/* 决定主轴的方向(即项目的排列方向) 默认值：row，主轴为水平方向，起点在左端。 */</span> row-reverse：; <span class="comment">/* 主轴为水平方向，起点在右端 column：主轴为垂直方向，起点在上沿 column-reverse：主轴为垂直方向，起点在下沿;*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: <span class="comment">/* 决定容器内项目是否可换行 默认值：*/</span></span><br><span class="line">nowrap<span class="comment">/* 不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整(变形) 而并不会挤到下一行。*/</span></span><br><span class="line">wrap：<span class="comment">/* 项目主轴总尺寸超出容器时换行，第一行在上方 wrap-reverse：换行，第一行在下方;*?</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>： <span class="comment">/*定义了项目在主轴的对齐方式。*/</span></span><br><span class="line"><span class="attribute">flex</span>-start <span class="comment">/*默认值: 左对齐*/</span></span><br><span class="line"><span class="attribute">flex</span>-end <span class="comment">/*右对齐*/</span></span><br><span class="line">center <span class="comment">/*居中*/</span></span><br><span class="line">space-between <span class="comment">/*两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。*/</span></span><br><span class="line">space-around <span class="comment">/*每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍。(边0.5，间隔1)*/</span></span><br><span class="line">space-evenly <span class="comment">/*均匀分布，首尾都有相等的间隔(1:1:1)*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: 定义了项目在交叉轴上的对齐方式</span><br><span class="line">默认值为 stretch 即如果项目未设置高度或者设为 auto，将占满整个容器的高度。</span><br><span class="line">flex-start：交叉轴的起点对齐</span><br><span class="line">flex-end：交叉轴的终点对齐</span><br><span class="line">center：交叉轴的中点对齐</span><br><span class="line">baseline: 项目的第一行文字的基线对齐</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">aligin-<span class="attribute">content</span>:控制多条轴线的交叉轴方向</span><br><span class="line">strech:默认；</span><br><span class="line">flex-start 左对齐</span><br><span class="line">flex-end：右对齐</span><br><span class="line">center：居中</span><br><span class="line">space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。</span><br><span class="line">space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍。(边<span class="number">0.5</span>，间隔<span class="number">1</span>)</span><br><span class="line">space-evenly:均匀分布，首尾都有相等的间隔(<span class="number">1</span>:<span class="number">1</span>:<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>flex-grow:定义 Flex 项目放大比例，默认为 0；<br>flex-shrink:定义 Flex 项目收缩比例，默认为 1；<br>align-self:单独为某个设置</p>
<h3 id="2-grid-布局"><a href="#2-grid-布局" class="headerlink" title="2.grid 布局"></a>2.grid 布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line"><span class="comment">/* grid-template-columns: repeat(auto-fill,minmax(100px,1fr)); */</span></span><br><span class="line"><span class="comment">/* grid-template-rows: 1fr 1fr; */</span></span><br><span class="line"><span class="comment">/* gap: 10px 10px; */</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_41192489/article/details/115588135">详情</a></p>
<p>常用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.MBox</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="comment">/* height: 100vh;    */</span></span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  <span class="comment">/* display: flex; */</span></span><br><span class="line">  <span class="comment">/* overflow: auto; */</span></span><br><span class="line">  <span class="comment">/* flex-wrap: wrap; */</span></span><br><span class="line">  <span class="comment">/* justify-content: center; */</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 设置几列 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="comment">/* grid-template-columns: repeat(auto-fill,minmax(100px,1fr)); */</span></span><br><span class="line">  <span class="comment">/* grid-template-rows: 1fr 1fr; */</span></span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.MBox</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">/* width: 100px; */</span></span><br><span class="line">  <span class="comment">/* height: 100px; */</span></span><br><span class="line">  <span class="comment">/* 不压缩且不扩大元素  */</span></span><br><span class="line">  <span class="comment">/* flex: 0 0 auto;   */</span></span><br><span class="line">  <span class="comment">/* margin: 10px 10px 0 0; */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="comment">/* grid-row: span 2; */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>/<span class="number">3</span>;</span><br><span class="line">  <span class="comment">/* grid-column: span 4; */</span></span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>/<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* .item:nth-child(3n)&#123;</span></span><br><span class="line"><span class="comment">    margin-right: 0px;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.MBox:after&#123;</span></span><br><span class="line"><span class="comment">    content: &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">    flex: auto;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>

<h2 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h2><p>外边距只塌路也称外边距合并，在文档流中相邻兄弟或父子关系的块级元素的外边距组合在一起变成单个外边距，只有在上下外边距才会出现塌陷，左右不会出现<br>解析，1.两个嵌套块级元素 Q，父元素如果没有上补白和上边框，那么它的上边距会和它的文档流中的的第一个子元素的上边距重叠，取两者较大的值，父元素上的外边距为 0，也会发生合并。(通俗来说: 子元素找不到父元素的 border 或者 padding.就会与父元素上边距重季) 2.两人相邻块级元素，如果上面的元素存在外边距 margin-bottom,下面的元素存在外边距 margin-top,那么它们之间外边距不是 margin-bottom + margin-top.而是取两者最人值外边距</p>
<h3 id="1-外边距计算方式"><a href="#1-外边距计算方式" class="headerlink" title="1.外边距计算方式"></a>1.外边距计算方式</h3><p>1.两个值为正数，取较大值 2.两个值为负数，取绝对值 Q 较大的值 3.一正一负，取两个值的和</p>
<h3 id="2-解决方式-父元素"><a href="#2-解决方式-父元素" class="headerlink" title="2.解决方式(父元素)"></a>2.解决方式(父元素)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.border</span>: <span class="number">1px</span> solid <span class="number">#fff</span></span><br><span class="line"><span class="number">2</span>.float: left.</span><br><span class="line"><span class="number">3</span>.position: absolute</span><br><span class="line"><span class="number">4</span>.padding: <span class="number">1px</span></span><br><span class="line"><span class="number">5</span>.display: inline-block</span><br><span class="line"><span class="number">6</span>.overflow. hidden</span><br><span class="line"><span class="number">7</span>.overflow: auto</span><br></pre></td></tr></table></figure>

<h2 id="css-中的伪类：before-与-after"><a href="#css-中的伪类：before-与-after" class="headerlink" title="css 中的伪类：before 与 after"></a>css 中的伪类：before 与 after</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//破碎图片占位,当用户网络出现问题的时候，可能会造成某些图片的访问失败</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">#aaaaaa</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(alt);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//自定义引用样式</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: open-quote;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: close-quote;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.618</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//图片渐变叠加</span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top right, <span class="number">#1a1a1a</span>, transparent);</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="html-中-meta-什么作用-HTML-中各种常用-meta-标签的作用"><a href="#html-中-meta-什么作用-HTML-中各种常用-meta-标签的作用" class="headerlink" title="html 中 meta 什么作用,HTML 中各种常用 meta 标签的作用"></a>html 中 meta 什么作用,HTML 中各种常用 meta 标签的作用</h2><p><a href="https://blog.csdn.net/weixin_32643811/article/details/117950069">查看</a></p>
<h2 id="媒体查询（media-query）"><a href="#媒体查询（media-query）" class="headerlink" title="媒体查询（media query）"></a>媒体查询（media query）</h2><p>媒体查询是 css3 新语法，可以针对不同的媒体类型定义不同的样式，可简单理解为根据页面不同的宽度，来使用不同的 css 样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">///and only not;</span><br><span class="line"><span class="keyword">@media</span> media-type <span class="keyword">and</span> (media-feature) &#123;</span><br><span class="line">  <span class="comment">/* CSS 样式规则 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">media-type 可以是 screen--(用于电脑屏幕，ipad，手机等)、print--(用于打印机)、<span class="attribute">all</span>--(用于所有设备) 等，表示媒体类型。</span><br><span class="line">media-feature 是一个媒体特性，例如 <span class="attribute">width</span>、<span class="attribute">height</span>、orientation 等，用于检查设备属性。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 默认样式 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在小屏幕上调整文本大小 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在非常小的屏幕上进一步调整文本大小 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/jhxl_/article/details/132400594">详细</a></p>
]]></content>
  </entry>
  <entry>
    <title>nginx配置使用</title>
    <url>/2024/04/01/nginx%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>nginx配置使用</p>
<span id="more"></span>




]]></content>
  </entry>
  <entry>
    <title>手撕底层</title>
    <url>/2024/03/21/%E6%89%8B%E6%92%95%E5%BA%95%E5%B1%82/</url>
    <content><![CDATA[<p>prototype，Map 底层是怎么实现的，Promise 应用和原理，手写一个 promise，Vuex4 的底层原理，js 深拷贝，重置表单,this 指向问题，js 闭包,new 关键字</p>
<span id="more"></span>

<h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">dom.<span class="property">Show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Show Message&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">dom.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Display</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Property Message&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">dom.<span class="title class_">Display</span>(); <span class="comment">//error</span></span><br><span class="line">dom.<span class="title class_">Show</span>();</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title function_">dom</span>();</span><br><span class="line">d.<span class="title class_">Display</span>();</span><br><span class="line">d.<span class="title class_">Show</span>(); <span class="comment">//error</span></span><br></pre></td></tr></table></figure>

<p>首先声明一个变量，将一个函数赋给他，因为在 Javascript 中每个函数都有一个 Portotype 属性，而对象没有。添加两个方法，分别直接添加和添加打破 Prototype 上面，来看下调用情况。分析结果如下：</p>
<p>1、不使用 prototype 属性定义的对象方法，是静态方法，只能直接用类名进行调用！另外，此静态方法中无法使用 this 变量来调用对象其他的属性！<br>2、使用 prototype 属性定义的对象方法，是非静态方法，只有在实例化后才能使用！其方法内部可以 this 来引用对象自身中的其他属性！</p>
<h2 id="一-Map-底层是怎么实现的"><a href="#一-Map-底层是怎么实现的" class="headerlink" title="一.Map 底层是怎么实现的"></a>一.Map 底层是怎么实现的</h2><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map构造函数</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">//key,value</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&quot;b&quot;</span>); <span class="comment">//相同key覆盖，去除重复</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Green&quot;</span> &#125;, <span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="number">2</span>)); <span class="comment">//获取value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="number">2</span>)); <span class="comment">//判断有无</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="number">1</span>); <span class="comment">//删除</span></span><br><span class="line"><span class="comment">//Map只在js中存在，不利于传输</span></span><br><span class="line"><span class="comment">//转换成数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(map);</span><br><span class="line"><span class="comment">//转换成对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map);</span><br><span class="line"><span class="comment">//数组查找快  链表增删快 Map结合了数组和链表实现高性能增删改查</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">    <span class="keyword">let</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(str);</span><br><span class="line">    array.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">let</span> key = array.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">let</span> list = map.<span class="title function_">get</span>(key) ? map.<span class="title function_">get</span>(key) : <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">    list.<span class="title function_">push</span>(str);</span><br><span class="line">    map.<span class="title function_">set</span>(key, list);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(map.<span class="title function_">values</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="哈希表实现"><a href="#哈希表实现" class="headerlink" title="哈希表实现"></a>哈希表实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//   自定义map</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyMap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initStore</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   hash</span></span><br><span class="line"><span class="title class_">MyMap</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">initStore</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">store</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(count);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">store</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">store</span>[i] = &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">MyMap</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hash</span> = <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> k % count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyMap</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params">k, v</span>) &#123;</span><br><span class="line">  <span class="comment">// 通过key计算余数8,取得房间号</span></span><br><span class="line">  <span class="keyword">let</span> roomIndex = <span class="variable language_">this</span>.<span class="title function_">hash</span>(k);</span><br><span class="line">  <span class="comment">// 取出链表头</span></span><br><span class="line">  <span class="keyword">let</span> queue = <span class="variable language_">this</span>.<span class="property">store</span>[roomIndex];</span><br><span class="line">  <span class="comment">// 找元素</span></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">next</span>) &#123;</span><br><span class="line">    <span class="comment">// 不断的向下找</span></span><br><span class="line">    <span class="keyword">if</span> (queue.<span class="property">next</span>.<span class="property">key</span> === k) &#123;</span><br><span class="line">      <span class="comment">// 覆盖</span></span><br><span class="line">      queue.<span class="property">next</span>.<span class="property">value</span> = v;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 下一个</span></span><br><span class="line">      queue = queue.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第一次执行到这里就是第一个数据</span></span><br><span class="line">  <span class="comment">// 第二次执行到这里就是末尾的一个</span></span><br><span class="line">  queue.<span class="property">next</span> = &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">key</span>: k,</span><br><span class="line">    <span class="attr">value</span>: v,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyMap</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> roomIndex = <span class="variable language_">this</span>.<span class="title function_">hash</span>(k);</span><br><span class="line">  <span class="keyword">let</span> queue = <span class="variable language_">this</span>.<span class="property">store</span>[roomIndex];</span><br><span class="line">  queue = queue.<span class="property">next</span>;</span><br><span class="line">  <span class="keyword">while</span> (queue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue.<span class="property">key</span> === k) &#123;</span><br><span class="line">      <span class="keyword">return</span> queue.<span class="property">value</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 指针下移</span></span><br><span class="line">      queue = queue.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">//没有找到</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">MyMap</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">has</span> = <span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">get</span>(k) !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">MyMap</span>();</span><br><span class="line"><span class="comment">//   调用MyMap</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">4</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">5</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">6</span>, <span class="string">&quot;f&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">7</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">8</span>, <span class="string">&quot;h&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">9</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m, m.<span class="title function_">get</span>(<span class="number">1</span>), m.<span class="title function_">has</span>(<span class="number">9</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<h2 id="二-Promise-应用和原理"><a href="#二-Promise-应用和原理" class="headerlink" title="二.Promise 应用和原理"></a>二.Promise 应用和原理</h2><h3 id="1-为什么会有-promise"><a href="#1-为什么会有-promise" class="headerlink" title="1.为什么会有 promise?"></a>1.为什么会有 promise?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// run(0),run(1),run(2) 需要依次调用，并且需要前一次调用的数据时</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-什么时候用-promise"><a href="#2-什么时候用-promise" class="headerlink" title="2.什么时候用 promise?"></a>2.什么时候用 promise?</h3><p>做异步任务时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isForget = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> getLv = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//resolve是成功时的reject失败时的</span></span><br><span class="line">  <span class="keyword">if</span> (isForget) &#123;</span><br><span class="line">    <span class="keyword">let</span> lv = &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;orange&quot;</span>,</span><br><span class="line">      <span class="attr">piece</span>: <span class="string">&quot;$223&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">resolve</span>(lv);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;忘了&quot;</span>);</span><br><span class="line">    <span class="title function_">reject</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testFn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//成功调用then，失败调用catch</span></span><br><span class="line">  getLv</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">fulfilled</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(fulfilled);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">rejected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(rejected);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">testFn</span>();</span><br></pre></td></tr></table></figure>

<p>练习：<br>function sleep(){<br>&#x2F;&#x2F;写出代码<br>}<br>sleep(2000).then(()&#x3D;&gt;{<br>console.log(1)<br>})</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sleep</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!!!&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2then:&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3catch:&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//打印结果为 2then: Error:error!!!,链式调用原理。为了保证链式调用正常进行，</span></span><br><span class="line"><span class="comment">//上一个promise返回的结果都会传给下一个promise，作为它成功时候的回调。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-手写一个-promise"><a href="#3-手写一个-promise" class="headerlink" title="3.手写一个 promise"></a>3.手写一个 promise</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myPromise</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> pending = <span class="string">&quot;待定&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> fulfilled = <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> rejected = <span class="string">&quot;失败&quot;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = myPromise.<span class="property">pending</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolveCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rejectCallbacks</span> = [];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">func</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)); <span class="comment">//必须要bind改变函数内this指向</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === myPromise.<span class="property">pending</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = myPromise.<span class="property">fulfilled</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = result;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resolveCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>(result);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === myPromise.<span class="property">pending</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = myPromise.<span class="property">rejected</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = result;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rejectCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>(result);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">//可以使用多个 .then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&quot;function&quot;</span> ? onFulfilled : <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">      onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&quot;function&quot;</span> ? onRejected : <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === myPromise.<span class="property">pending</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resolveCallbacks</span>.<span class="title function_">push</span>(onFulfilled);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rejectCallbacks</span>.<span class="title function_">push</span>(onRejected);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === myPromise.<span class="property">fulfilled</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === myPromise.<span class="property">rejected</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">// let myCommit = new myPromise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     throw new Error(&#x27;bsd&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// myCommit.then(</span></span><br><span class="line"><span class="comment">//     result =&gt; &#123; console.log(result); &#125;,</span></span><br><span class="line"><span class="comment">//     result =&gt; &#123; console.log(result.message); &#125;</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// myCommit.then(</span></span><br><span class="line"><span class="comment">//     undefined,  //要对传入的参数判断，改为function;</span></span><br><span class="line"><span class="comment">//     result =&gt; &#123; console.log(result.message); &#125;</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> myCommit = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;有度&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第四&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reject.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第三&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="三-Vuex4-的底层原理"><a href="#三-Vuex4-的底层原理" class="headerlink" title="三.Vuex4 的底层原理"></a>三.Vuex4 的底层原理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="comment">//在js中，constructor函数是类的构造函数。在创建类的新实例时，会自动调用constructor函数。constructor函数可以用来初始化类的实例对象。</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="title function_">reactive</span>(options.<span class="property">state</span>);</span><br><span class="line">    <span class="comment">//getters</span></span><br><span class="line">    <span class="keyword">let</span> getters = options.<span class="property">getters</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getters</span> = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>.<span class="property">getters</span>, item, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> getters[item](<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//mutations</span></span><br><span class="line">    <span class="keyword">let</span> mutations = options.<span class="property">mutations</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mutations</span> = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(mutations).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mutations</span>[item] = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        mutations[item](<span class="variable language_">this</span>.<span class="property">state</span>, data);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">commit</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mutations</span>[key](value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//app插件机制，当执行use，检查对象中是否有install，如果有，先去执行。</span></span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$store</span> = <span class="variable language_">this</span>;</span><br><span class="line">    app.<span class="title function_">provide</span>(<span class="string">&quot;store&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createStore</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Store</span>(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">inject</span>(<span class="string">&quot;store&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四-js-深拷贝"><a href="#四-js-深拷贝" class="headerlink" title="四.js 深拷贝"></a>四.js 深拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cloned = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br><span class="line"><span class="comment">//只可以实现基于基础的JSON的数据转换，其他的如Reg,function,Set,Map不可以转换</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开发中还可以使用第三方库lodash,under-score</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用slice()方法返回一个子数组，在进行reverse； 不会改变原数组</span></span><br><span class="line">time1 = time.<span class="title function_">slice</span>().<span class="title function_">reverse</span>(); <span class="comment">//time1数组反转  time数组不变</span></span><br></pre></td></tr></table></figure>

<h2 id="五-重置表单"><a href="#五-重置表单" class="headerlink" title="五.重置表单"></a>五.重置表单</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置表单，不依赖任何写死的属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, <span class="variable language_">this</span>.<span class="property">$option</span>.<span class="title function_">data</span>()); <span class="comment">//vue2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue3</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">ref</span>=<span class="string">&quot;formValidateRef&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formValidate&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;ruleValidate&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="comment">// 初始化数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">const</span> <span class="title function_">initFormValldate</span> = (<span class="params"></span>) =&gt; (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">xxxa</span>:<span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">xxxb</span>:<span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="comment">// 表单赋值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">const</span> formValidate = <span class="title function_">reactive</span>(<span class="title function_">initFormValidate</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="comment">// 清除表单数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="title class_">Object</span>.<span class="title function_">asslgn</span>(formValidate, <span class="title function_">initFormValidate</span>()):</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="六-js-闭包"><a href="#六-js-闭包" class="headerlink" title="六.js 闭包"></a>六.js 闭包</h2><p>1.避免变量污染；2.私有化；3.保存变量，常驻内存</p>
<p>应用场景：防抖，节流，库的封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bibao</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nbFn</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    num += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">nbFn</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">delate</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">nbFn</span>(-<span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1 = <span class="title function_">bibao</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1);</span><br></pre></td></tr></table></figure>

<h2 id="七-new-关键字"><a href="#七-new-关键字" class="headerlink" title="七.new 关键字"></a>七.new 关键字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(); <span class="comment">// 1.创建一个空对象</span></span><br><span class="line">  obj.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 2.使空对象的隐式原型指向构造函数的显式原型</span></span><br><span class="line"><span class="comment">//   let obj = Object.create(fn.prototype); //1,2结合</span></span><br><span class="line">  <span class="keyword">let</span> res = fn.<span class="title function_">apply</span>(obj, args); <span class="comment">// 3.把函数中的this指向该对象并执行构造函数中的语句</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> &amp;&amp; res !== <span class="literal">null</span>) || <span class="keyword">typeof</span> res === <span class="string">&quot;function&quot;</span></span><br><span class="line">    ? res</span><br><span class="line">    : obj; <span class="comment">// 4.判断返回值类型,返回该对象实例</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, score</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rest = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&quot;dmc&quot;</span>, <span class="number">21</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>经典题</title>
    <url>/2024/02/01/%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<p>unshift，js 的数据类型，数组的常用方法，字符串的常用方法，对象的常用方法，属性描述符，原型和原型链，js 中的值类型和引用类型区别，判读对象数据类型,ES6基本语法</p>
<span id="more"></span>

<h3 id="1-写-unshift"><a href="#1-写-unshift" class="headerlink" title="1.写 unshift"></a>1.写 unshift</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// a.unshift(b)</span></span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myUnshift</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="variable language_">arguments</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="variable language_">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a.myUnshift(5,6,7)</span></span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">unshift</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-js-的数据类型"><a href="#2-js-的数据类型" class="headerlink" title="2.js 的数据类型"></a>2.js 的数据类型</h3><p>JavaScript 中有七种数据类型（前五种为基本数据类型，也称为原始类型，而<br>object 为复杂数据类型）。<br>1、number （数字类型）: 用于任何类型的数字：整数或浮点数，在 2 的正 53 次幂与 2 的负 53 次幂范围内的整数，bigint 是用于任意长度的整数(我个人将其归结为数字类型)。<br>2、string(字符串) ：一个字符串可以包含一个或多个字符。<br>3、boolean(布尔):仅包含小写的 true 和 false。<br>4、null：空值 —— 只有一个 null。<br>5、undefined：用于未定义的值<br>6、symbol： 用于唯一的标识符。<a href="https://blog.csdn.net/TianXuab/article/details/133768353">详解</a><br>7、object：用于更复杂的数据结构。<br>typeof：查看数据类型。</p>
<h3 id="3-数组的常用方法"><a href="#3-数组的常用方法" class="headerlink" title="3.数组的常用方法"></a>3.数组的常用方法</h3><h4 id="1-改变原数组的方法："><a href="#1-改变原数组的方法：" class="headerlink" title="1.改变原数组的方法："></a>1.改变原数组的方法：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>();   <span class="comment">//向数组末尾添加一个或多个元素，并返回新的长度。</span></span><br><span class="line">arr.<span class="title function_">pop</span>();    <span class="comment">//删除数组最后一个元素，并返回该元素的值。如果数组已经为空，则 pop() 不 改变数组，并返回 undefined 值。</span></span><br><span class="line">arr.<span class="title function_">unshift</span>();<span class="comment">//向数组的开头添加一个或更多元素，并返回新的长度。</span></span><br><span class="line">arr.<span class="title function_">shift</span>();  <span class="comment">//删除数组的第一个元素，并返回第一个元素的值,如果数组是空的，那么 shift() 方法将不进行任何操作,返回 undefined 值。</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();<span class="comment">//该方法会改变原来的数组----将原来的数组倒序，而不会创建新的数组,会返回反转的数组。</span></span><br><span class="line">&#123;</span><br><span class="line">arr.<span class="title function_">sort</span>()    <span class="comment">//(1)默认排序（按照 Unicode 编码进行排序）</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);<span class="comment">//(2)//按数字从小到大排列</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">length</span> - b.<span class="property">length</span>); <span class="comment">//（3）按照字符串长度从小到大排序</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">array.<span class="title function_">splice</span>(start[, deleteCount[, item1[, item2[, ...]]]])  <span class="comment">//start起始位置的索引值;deleteCount：可选，指定要删除的元素数量;item1, item2, ...：可选，指定要插入的新元素。</span></span><br><span class="line"></span><br><span class="line"># 删除元素</span><br><span class="line"># <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"># <span class="keyword">const</span> removed = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"># <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 改变原数组 arr，值为 [1, 4, 5]</span></span><br><span class="line"># <span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// 返回被删除的元素组成的新数组，值为 [2, 3]</span></span><br><span class="line"></span><br><span class="line"># 插入元素</span><br><span class="line"># <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"># arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"># <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 改变原数组 arr，值为 [1, 2, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"># 替换元素</span><br><span class="line"># <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"># arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"># <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 改变原数组 arr，值为 [1, 2, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 4, 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-不改变原始数组的方法："><a href="#2-不改变原始数组的方法：" class="headerlink" title="2.不改变原始数组的方法："></a>2.不改变原始数组的方法：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">concat</span>()   <span class="comment">//连接多个数组（拼接在一起）,返回一个新的数组</span></span><br><span class="line">arr.<span class="title function_">join</span>()     <span class="comment">//将数组通过某个分隔符分割转换成字符串 返回的是一个字符串</span></span><br><span class="line">arr.<span class="title function_">slice</span>(start,end)  <span class="comment">//对数组中的数据进行截取 放到一个新的数组里返回</span></span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">element,index,array</span>)=&gt;</span>&#123;<span class="keyword">return</span> ...&#125;)   <span class="comment">//会新创建一个数组 将符合条件的值丢进去;element：当前遍历到的元素。index：当前遍历到的元素的索引。array：原始数组。</span></span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function">(<span class="params">element,index,array</span>)=&gt;</span>&#123; <span class="keyword">return</span> &#125;)    <span class="comment">//对数组的每一项进行处理 返回到一个新的数组里;element：当前遍历到的元素。index：当前遍历到的元素的索引。array：原始数组。</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;&#125;)  <span class="comment">//遍历数组；不返回新数组</span></span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function">(<span class="params">element,index,array</span>)=&gt;</span>&#123; <span class="keyword">return</span> &#125;)    <span class="comment">//判断数组中的每一项是否符合规范，都符合返回一个true ，否则返回false</span></span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function">(<span class="params">element,index,array</span>)=&gt;</span>&#123; <span class="keyword">return</span> &#125;) 判断数组，如果其中有一项符合条件的话就返回<span class="literal">true</span>，都不符合返回<span class="literal">false</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(searchElement, fromIndex)   <span class="comment">//找索引，如果找到则返回相应的索引值(只返回第一个)，否则返回 -1;searchElement：要查找的元素;fromIndex（可选）：开始查找的索引位置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-字符串的常用方法"><a href="#4-字符串的常用方法" class="headerlink" title="4.字符串的常用方法"></a>4.字符串的常用方法</h3><p>所有字符串常用方法, 都不会改变原始字符串, 都是以返回值的形式出现结果<br><a href="https://zhuanlan.zhihu.com/p/625078571">看这</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">charAt</span>(<span class="number">4</span>) 是找到字符串中指定索引位置的内容返回</span><br><span class="line"><span class="title function_">charCodeAt</span>(<span class="number">4</span>) 就是返回对应索引位置的 unicode 编码</span><br><span class="line"><span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>) 就是按照字符找到对应的索引</span><br><span class="line"><span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">5</span>) 是从后向前检测该字符在字符串内的索引位置</span><br><span class="line"><span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">8</span>) 是用来截取字符串使用的</span><br><span class="line"><span class="title function_">slice</span>(起始索引，结束索引) 截取字符串</span><br><span class="line"><span class="title function_">substr</span>(从哪个索引开始，截取多少个)</span><br><span class="line"><span class="title function_">replace</span>(<span class="string">&#x27;llo&#x27;</span>, <span class="string">&#x27;Me&#x27;</span>)</span><br><span class="line">字符串.<span class="title function_">split</span>(<span class="string">&#x27;指定的切割符&#x27;</span>)</span><br><span class="line">字符串.<span class="title function_">concat</span>(字符串)</span><br><span class="line">字符串.<span class="title function_">trim</span>() 去除空白内容以后的字符串</span><br><span class="line">trimEnd / trimRight 去除字符串尾部的空白内容</span><br></pre></td></tr></table></figure>

<h3 id="5-对象的常用方法"><a href="#5-对象的常用方法" class="headerlink" title="5.对象的常用方法"></a>5.对象的常用方法</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDA2MTI1MA==&mid=2649114301&idx=2&sn=309920e8c15948cb3710c2c533e086e0&chksm=be586110892fe806a810d04b27bfc164895232cf63cd44eb0627ff658f6182b3aa0b67199743&scene=27">看这</a></p>
<h3 id="6-数组去重的方法有哪些"><a href="#6-数组去重的方法有哪些" class="headerlink" title="6.数组去重的方法有哪些"></a>6.数组去重的方法有哪些</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>使用 <span class="title class_">Set</span> 对象：利用 <span class="title class_">Set</span> 对象的特性来实现数组去重。<span class="title class_">Set</span> 对象是一种集合，它的值是唯一的，可以帮助我们去掉数组中的重复元素。</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"># <span class="keyword">const</span> uniqueArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line"># <span class="number">2.</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">22</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === index);</span><br><span class="line"># <span class="number">3.</span></span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev.<span class="title function_">includes</span>(curr) ? prev : [...prev, curr], []);</span><br></pre></td></tr></table></figure>

<h3 id="7-属性描述符"><a href="#7-属性描述符" class="headerlink" title="7.属性描述符"></a>7.属性描述符</h3><p>属性描述符是 JavaScript 对象中的一个对象，描述对象属性的特征，包含了以下几个属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;张三&#x27;</span>,    <span class="comment">//属性值</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,   <span class="comment">//属性是否可重写</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//属性是否可枚举</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span><span class="comment">//属性是否可删除，以及其他特性是否可配置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>() <span class="comment">//冻结一个对象，使其不可更改;无法添加新的属性，删除现有属性，或更改现有属性的值;但是是浅冻结;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(g)  <span class="comment">//用于封闭一个对象，使其不能添加新属性，并且已有属性不可配置。封闭后的对象的属性值可以修改，但不能删除。</span></span><br></pre></td></tr></table></figure>

<h3 id="8-原型和原型链"><a href="#8-原型和原型链" class="headerlink" title="8.原型和原型链"></a>8.原型和原型链</h3><p><a href="https://blog.csdn.net/m0_55734030/article/details/127971640">查看</a><br><a href="https://blog.csdn.net/dkm123456/article/details/111885534">例题</a></p>
<h4 id="1-什么是原型，什么是原型链？"><a href="#1-什么是原型，什么是原型链？" class="headerlink" title="1. 什么是原型，什么是原型链？"></a>1. 什么是原型，什么是原型链？</h4><p>原型：每个函数都有 prototype 属性，该属性指向原型对象；使用原型对象的好处是所有对象实例共享它所包含的属性和方法。<br>原型链：主要解决了继承的问题；每个对象都拥有一个原型对象，通过__proto__ 指针指向其原型对象，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。<br>原型的作用： 1.数据共享 节约内存内存空间 2.实现继承</p>
<p>01 显式原型<br>每一个类（构造函数）都有一个显示原型 prototype（本质就是个对象）<br>02 隐式原型<br>每一个实例都有一个隐式原型__proto__<br>03 显式原型与隐式原型的关系<br>类显式原型的 prototype 等于其创建的实例的隐式原型__proto__</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p>04 原型链<br>查找对象实例的方法和属性时，先在自身找，找不到则沿着__proto__向上查找，我们把__proto__形成的链条关系称原型链（实现了 js 继承）</p>
<h4 id="2-原型与原型链有什么作用"><a href="#2-原型与原型链有什么作用" class="headerlink" title="2. 原型与原型链有什么作用"></a>2. 原型与原型链有什么作用</h4><p>01 实现了 js 的继承 class 的 extends 方法<br>02 实现了实例的公用属性和方法（ 实现类的实例方法扩展）</p>
<h4 id="3-怎么样让字符串有通用翻转方法"><a href="#3-怎么样让字符串有通用翻转方法" class="headerlink" title="3.怎么样让字符串有通用翻转方法"></a>3.怎么样让字符串有通用翻转方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reverse</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-什么是类，什么是实例"><a href="#4-什么是类，什么是实例" class="headerlink" title="4.什么是类，什么是实例"></a>4.什么是类，什么是实例</h4><p>01 类：是创建对象实例的模板 本质上讲类是个函数 (例如 Array object String )<br>001 构造函数 ：用 new 来执行的函数<br>002 class xxx{}<br>02 实例:就是由类创建的对象 本质上就是对象<br>例如 [1,2,3] {name : “mumu “ } , “abc”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure>

<h3 id="10-浅析-websocket-和-http-的区别"><a href="#10-浅析-websocket-和-http-的区别" class="headerlink" title="10.浅析 websocket 和 http 的区别"></a>10.浅析 websocket 和 http 的区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">方法<span class="number">1</span>：把<span class="keyword">var</span>变成<span class="keyword">let</span></span><br><span class="line"></span><br><span class="line">方法二：闭包</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">j</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法三：使用 <span class="built_in">setTimeout</span> 的第三个参数，这个值会被当成函数的参数传入</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">j</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">    &#125;, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-js-中的值类型和引用类型区别"><a href="#10-js-中的值类型和引用类型区别" class="headerlink" title="10.js 中的值类型和引用类型区别"></a>10.js 中的值类型和引用类型区别</h3><p><a href="https://blog.csdn.net/sinat_22480443/article/details/115179848">查看</a></p>
<h3 id="11-如何判断哪个对象是属于哪种基本数据类型呢"><a href="#11-如何判断哪个对象是属于哪种基本数据类型呢" class="headerlink" title="11.如何判断哪个对象是属于哪种基本数据类型呢"></a>11.如何判断哪个对象是属于哪种基本数据类型呢</h3><p>1.typeof 能判断出以下 8 种类型：Number、Boolean、String、undefined、Symbol、BigInt、Object、Function。需要注意的几点：<br>typeof null &#x3D;&#x3D;&#x3D; ‘object’<br>typeof NaN &#x3D;&#x3D;&#x3D; ‘number’<br>缺点：function 之外的其它引用数据类型、基础数据类型 null 以及使用构造函数创建的 Number 、String、Boolean 等都被判断为 object</p>
<p>2.Object.prototype.toString.call()（最推荐使用）<br>能够检测出所有的数据类型</p>
<h3 id="12-ES6基本语法"><a href="#12-ES6基本语法" class="headerlink" title="12.ES6基本语法"></a>12.ES6基本语法</h3><p><a href="https://blog.csdn.net/See_Star/article/details/121566165">查看</a></p>
]]></content>
  </entry>
  <entry>
    <title>js输入框自动换行</title>
    <url>/2024/01/08/%E8%BE%93%E5%85%A5%E6%A1%86%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p>通过js,使textarea实现自动换行功能。</p>
<span id="more"></span>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入框自动换行功能 传入输入框的元素</span></span><br><span class="line"><span class="keyword">var</span> autoTextarea = <span class="keyword">function</span> (<span class="params">elem: any</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> isFirefox =</span><br><span class="line">        !!<span class="variable language_">document</span>.<span class="property">getBoxObjectFor</span> || <span class="string">&quot;mozInnerScreenX&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>,</span><br><span class="line">        isOpera =</span><br><span class="line">            !!<span class="variable language_">window</span>.<span class="property">opera</span> &amp;&amp; !!<span class="variable language_">window</span>.<span class="property">opera</span>.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;Opera&quot;</span>),</span><br><span class="line">        addEvent = <span class="keyword">function</span> (<span class="params">type: any, callback: any</span>) &#123;</span><br><span class="line">            elem.<span class="property">addEventListener</span> ? elem.<span class="title function_">addEventListener</span>(type, callback, <span class="literal">false</span>) : elem.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, callback);</span><br><span class="line">        &#125;,</span><br><span class="line">        getStyle = elem.<span class="property">currentStyle</span></span><br><span class="line">            ? <span class="keyword">function</span> (<span class="params">name: any</span>): any &#123;</span><br><span class="line">                <span class="keyword">var</span> val = elem.<span class="property">currentStyle</span>[name];</span><br><span class="line">                <span class="keyword">if</span> (name === <span class="string">&quot;height&quot;</span> &amp;&amp; val.<span class="title function_">search</span>(<span class="regexp">/px/i</span>) !== <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> rect = elem.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">                    <span class="keyword">return</span> (</span><br><span class="line">                        rect.<span class="property">bottom</span> -</span><br><span class="line">                        rect.<span class="property">top</span> -</span><br><span class="line">                        <span class="built_in">parseFloat</span>(<span class="title function_">getStyle</span>(<span class="string">&quot;paddingTop&quot;</span>)) -</span><br><span class="line">                        <span class="built_in">parseFloat</span>(<span class="title function_">getStyle</span>(<span class="string">&quot;paddingBottom&quot;</span>)) +</span><br><span class="line">                        <span class="string">&quot;px&quot;</span></span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">            : <span class="keyword">function</span> (<span class="params">name: any</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">getComputedStyle</span>(elem, <span class="literal">null</span>)[name];</span><br><span class="line">            &#125;,</span><br><span class="line">        minHeight = <span class="built_in">parseFloat</span>(<span class="title function_">getStyle</span>(<span class="string">&quot;height&quot;</span>));</span><br><span class="line">    elem.<span class="property">style</span>.<span class="property">resize</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> change = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> scrollTop,</span><br><span class="line">            height,</span><br><span class="line">            padding = <span class="number">0</span>,</span><br><span class="line">            style = elem.<span class="property">style</span>;</span><br><span class="line">        <span class="keyword">if</span> (elem.<span class="property">_length</span> === elem.<span class="property">value</span>.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">        elem.<span class="property">_length</span> = elem.<span class="property">value</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span> (!isFirefox &amp;&amp; !isOpera) &#123;</span><br><span class="line">            padding = <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(<span class="string">&quot;paddingTop&quot;</span>)) + <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(<span class="string">&quot;paddingBottom&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        scrollTop = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">        elem.<span class="property">style</span>.<span class="property">height</span> = minHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (elem.<span class="property">scrollHeight</span> &gt; minHeight) &#123;</span><br><span class="line">            height = elem.<span class="property">scrollHeight</span> - padding;</span><br><span class="line">            style.<span class="property">overflowY</span> = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">            style.<span class="property">height</span> = height + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            scrollTop += <span class="built_in">parseInt</span>(style.<span class="property">height</span>) - elem.<span class="property">currHeight</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = scrollTop;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = scrollTop;</span><br><span class="line">            elem.<span class="property">currHeight</span> = <span class="built_in">parseInt</span>(style.<span class="property">height</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">addEvent</span>(<span class="string">&quot;propertychange&quot;</span>, change);</span><br><span class="line">    <span class="title function_">addEvent</span>(<span class="string">&quot;input&quot;</span>, change);</span><br><span class="line">    <span class="title function_">addEvent</span>(<span class="string">&quot;focus&quot;</span>, change);</span><br><span class="line">    <span class="title function_">change</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">text</span>: any = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;textarea1&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="title function_">autoTextarea</span>(text[i]);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">textarea &#123;</span><br><span class="line">    line-<span class="attr">height</span>: 32px;</span><br><span class="line">    font-<span class="attr">size</span>: 13px;</span><br><span class="line">    <span class="attr">height</span>: 32px;</span><br><span class="line">    border-<span class="attr">radius</span>: 5px;</span><br><span class="line">    background-<span class="attr">color</span>: <span class="title function_">rgba</span>(<span class="number">226</span>, <span class="number">177</span>, <span class="number">244</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attr">outline</span>: <span class="number">0</span> none;</span><br><span class="line">    max-<span class="attr">height</span>: 300px;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">96</span>%;</span><br><span class="line">    <span class="attr">border</span>: 1px solid #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Day.js时间处理</title>
    <url>/2024/01/08/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库</p>
<span id="more"></span>

<h3 id="安装Day-js"><a href="#安装Day-js" class="headerlink" title="安装Day.js"></a>安装Day.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install dayjs --save</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dayjs</span>(<span class="string">&#x27;2018-08-08&#x27;</span>) <span class="comment">// 解析</span></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">&#x27;&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A&#x27;</span>) <span class="comment">// 展示</span></span><br><span class="line"><span class="title function_">dayjs</span>()</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&#x27;month&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">month</span>() <span class="comment">// 获取</span></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">add</span>(<span class="number">1</span>, <span class="string">&#x27;year&#x27;</span>) <span class="comment">// 处理</span></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">isBefore</span>(<span class="title function_">dayjs</span>()) <span class="comment">// 查询</span></span><br></pre></td></tr></table></figure>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//背景图片</span></span><br><span class="line"><span class="attr">width</span>: 100vw;</span><br><span class="line"><span class="attr">height</span>: 100vh;</span><br><span class="line">background-<span class="attr">image</span>: <span class="title function_">url</span>(<span class="string">&#x27;https://img.zcool.cn/community/038958357a84fc40000012e7edb94ad.png&#x27;</span>);</span><br><span class="line">background-<span class="attr">position</span>: center;</span><br><span class="line">background-<span class="attr">size</span>: cover;</span><br><span class="line">background-<span class="attr">repeat</span>: no-repeat;</span><br><span class="line">background-<span class="attr">attachment</span>: fixed;</span><br><span class="line"></span><br><span class="line"><span class="attr">display</span>: flex;</span><br><span class="line">align-<span class="attr">items</span>: center;</span><br><span class="line">justify-<span class="attr">content</span>: center;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>图片处理</title>
    <url>/2024/01/08/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>图片上传前压缩，图片懒加载,页面变成pdf下载</p>
<span id="more"></span>

<h3 id="图片上传前压缩"><a href="#图片上传前压缩" class="headerlink" title="图片上传前压缩"></a>图片上传前压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当图片大于500k时</span></span><br><span class="line"> <span class="keyword">if</span> (file2.<span class="property">size</span> / <span class="number">1024</span> &gt; <span class="number">500</span>)&#123; </span><br><span class="line">   imgFile = <span class="keyword">await</span> <span class="title function_">blobToBase64</span>(file, file.<span class="property">name</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">blobToBase64</span> = <span class="keyword">async</span> (<span class="params">blob: any, fileName: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(); <span class="comment">// 实例化一个reader文件</span></span><br><span class="line">    <span class="keyword">await</span> reader.<span class="title function_">readAsDataURL</span>(blob); <span class="comment">// 添加二进制文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        reader.<span class="property">onload</span> = <span class="keyword">async</span> (<span class="attr">event</span>: any) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> base64 = <span class="keyword">await</span> event.<span class="property">target</span>.<span class="property">result</span>; <span class="comment">// 获取到它的base64文件</span></span><br><span class="line">            <span class="keyword">const</span> scale = <span class="number">0.6</span>; <span class="comment">// 设置缩放比例 （0-1）</span></span><br><span class="line">            <span class="keyword">let</span> file = <span class="keyword">await</span> <span class="title function_">compressImg</span>(base64, scale, fileName);</span><br><span class="line">            <span class="title function_">resolve</span>(file);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 压缩大小</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compressImg</span> = (<span class="params">base64: any, scale: any, fileName: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理缩放，转换格式</span></span><br><span class="line">    <span class="comment">// 用canvas来压缩</span></span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span> = base64;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">canvas</span>: any = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">            canvas.<span class="title function_">setAttribute</span>(<span class="string">&#x27;width&#x27;</span>, img.<span class="property">width</span> * scale);</span><br><span class="line">            canvas.<span class="title function_">setAttribute</span>(<span class="string">&#x27;height&#x27;</span>, img.<span class="property">height</span> * scale);</span><br><span class="line">            ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">            ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">            <span class="comment">// 转成base64 文件</span></span><br><span class="line">            base64 = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="number">0.8</span>); <span class="comment">//0到1之间的取值，主要用来选定图片的质量，默认值是0.92，超出范围也会选择默认值</span></span><br><span class="line">            <span class="keyword">const</span> arr = base64.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> mime = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">const</span> bytes = <span class="title function_">atob</span>(arr[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">const</span> bytesLength = bytes.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">const</span> u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(bytesLength);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bytes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                u8arr[i] = bytes.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> file = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], fileName, &#123; <span class="attr">type</span>: mime &#125;);</span><br><span class="line">            <span class="title function_">resolve</span>(file);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//预先设定一个简略图或者加载图，当页面加载到时图片再切换src</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;img&#x27;</span>).<span class="property">length</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="title function_">lazyLoad</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = lazyLoad</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazyLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> seeHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="keyword">let</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(seeHeight,scrollTop);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (img[i].<span class="property">offsetTop</span> &lt; seeHeight + scrollTop) &#123;</span><br><span class="line">            <span class="keyword">if</span> (img[i].<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>) == <span class="string">&quot;../../assets/dw.jpg&quot;</span>) &#123;</span><br><span class="line">                img[i].<span class="property">src</span> = img[i].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data_src&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            n = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="页面PDF下载"><a href="#页面PDF下载" class="headerlink" title="页面PDF下载"></a>页面PDF下载</h3><p>使用浏览器原生打印方法pdf下载，注意canvas要先替换成图片元素再下载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">downloadPDF () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isShowEcharts</span> = <span class="literal">false</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title class_">GeneratepPicture</span>()</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fullscreenLoading</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">printpage</span>()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title class_">GeneratepPicture</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fullscreenLoading</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">const</span> mainCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mainCanvas.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = mainCanvas[i]</span><br><span class="line">    <span class="keyword">const</span> imgRef = <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;canvans&#x27;</span> + i]</span><br><span class="line">    <span class="keyword">const</span> mainImg = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    <span class="keyword">const</span> mainImgSrc = item.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">    mainImg.<span class="property">src</span> = mainImgSrc</span><br><span class="line">    mainImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      imgRef.<span class="property">innerHTML</span> = <span class="string">`&lt;img style=&quot;   width: 100%;height: 100%;&quot; src=<span class="subst">$&#123;mainImgSrc&#125;</span>&gt;`</span> <span class="comment">// 用图片替换 canvas</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">printpage () &#123;</span><br><span class="line">  <span class="comment">// const oldInnerHtml = window.document.body.innerHTML</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">reportDetailRef</span>.<span class="property">innerHTML</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">print</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>()</span><br><span class="line">  <span class="comment">// window.document.body.innerHTML = oldInnerHtml</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这是占位元素分隔 页面  pdf换页面*/</span></span><br><span class="line">.<span class="property">placeholder</span> &#123;</span><br><span class="line">  page-<span class="keyword">break</span>-<span class="attr">before</span>: always;</span><br><span class="line">  <span class="attr">height</span>: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">placeholder2</span> &#123;</span><br><span class="line">  <span class="attr">height</span>: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">placeholder3</span> &#123;</span><br><span class="line">  <span class="attr">height</span>: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hexo 基本使用</title>
    <url>/2024/01/08/hexo/</url>
    <content><![CDATA[<p>Hexo是一款基于Node.js的静态博客框架,依赖少易于安装使用,可以方便的生成静态网页托管在GitHub和Coding上,是搭建博客的首选框架。</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>typescript学习</title>
    <url>/2023/12/12/typescript%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>typescript 学习</p>
<span id="more"></span>

<h3 id="1-类型推断"><a href="#1-类型推断" class="headerlink" title="1.类型推断"></a>1.类型推断</h3><h3 id="2-类型注解"><a href="#2-类型注解" class="headerlink" title="2.类型注解"></a>2.类型注解</h3><h3 id="3-类型断言"><a href="#3-类型断言" class="headerlink" title="3.类型断言"></a>3.类型断言</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> result = numArr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">number</span>; <span class="comment">//只有确定这个结果才这样用，如果有undefined就不要这样用。</span></span><br><span class="line">result*<span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-基础类型和联合类型"><a href="#4-基础类型和联合类型" class="headerlink" title="4.基础类型和联合类型"></a>4.基础类型和联合类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v1</span>: <span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v2</span>: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v3</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">nu</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">nu2</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v4</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">v5</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h3 id="5-数组，元祖，枚举"><a href="#5-数组，元祖，枚举" class="headerlink" title="5.数组，元祖，枚举"></a>5.数组，元祖，枚举</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr11</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;4&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">t1</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">number</span>?] = [<span class="number">1</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>]; <span class="comment">//?代表可选,必须放在最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MyEunm</span>&#123;</span><br><span class="line">    A,</span><br><span class="line">    B,</span><br><span class="line">    C</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyEunm</span>.<span class="property">A</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyEunm</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有返回值用void</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyFn</span>(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">string</span> ,c?:<span class="built_in">boolean</span>,...rest:<span class="built_in">number</span>[]</span>):<span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = <span class="title class_">MyFn</span>(<span class="number">20</span>,<span class="string">&#x27;dbb&#x27;</span>,<span class="literal">true</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="7-接口"><a href="#7-接口" class="headerlink" title="7.接口"></a>7.接口</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>:<span class="title class_">Obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="8-类型别名"><a href="#8-类型别名" class="headerlink" title="8.类型别名"></a>8.类型别名</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyUseNum</span> = <span class="built_in">string</span>|<span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="title class_">MyUseNum</span> = <span class="number">10</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="9-泛型"><a href="#9-泛型" class="headerlink" title="9.泛型"></a>9.泛型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">MyFn</span>&lt;T&gt;(<span class="attr">a</span>:T,<span class="attr">b</span>:T):T[] &#123;</span><br><span class="line">    <span class="keyword">return</span> [a,b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MyFn</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-示例"><a href="#10-示例" class="headerlink" title="10.示例"></a>10.示例</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> instance <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//一般情况下，接口类型会放到一个文件</span></span><br><span class="line"><span class="comment">// 下面两个TS接口，表示要传的参数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReqLogin</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">paw</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReqStatus</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">navStatus</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Res是返回的参数，T是泛型，需要自己定义，返回对数统一管理***</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Res</span>&lt;T&gt; = <span class="title class_">Promise</span>&lt;<span class="title class_">ItypeAPI</span>&lt;T&gt;&gt;;</span><br><span class="line"><span class="comment">// 一般情况下响应数据返回的这三个参数，</span></span><br><span class="line"><span class="comment">// 但不排除后端返回其它的可能性，</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ItypeAPI</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">data</span>: T,<span class="comment">//请求的数据，用泛型</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="built_in">string</span> | <span class="literal">null</span> <span class="comment">// 返回状态码的信息，如请求成功等</span></span><br><span class="line">    <span class="attr">code</span>: <span class="built_in">number</span> <span class="comment">//返回后端自定义的200，404，500这种状态码</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// post请求 ，没参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">LogoutAPI</span> = (): <span class="title class_">Res</span>&lt;<span class="literal">null</span>&gt; =&gt; </span><br><span class="line">    instance.<span class="title function_">post</span>(<span class="string">&quot;/admin/logout&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// post请求，有参数,如传用户名和密码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginAPI = (<span class="attr">data</span>: <span class="title class_">ReqLogin</span>): <span class="title class_">Res</span>&lt;<span class="built_in">string</span>&gt; =&gt;</span><br><span class="line">    instance.<span class="title function_">post</span>(<span class="string">&quot;/admin/login&quot;</span>, data);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// post请求 ，没参数，但要路径传参</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">StatusAPI</span> = (<span class="attr">data</span>: <span class="title class_">ReqStatus</span>): <span class="title class_">Res</span>&lt;<span class="literal">null</span>&gt; =&gt;</span><br><span class="line">    instance.<span class="title function_">post</span>(<span class="string">`/productCategory?ids=<span class="subst">$&#123;data.id&#125;</span>&amp;navStatus=<span class="subst">$&#123;data.navStatus&#125;</span>`</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//  get请求，没参数，</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">FlashSessionListApi</span> = (): <span class="title class_">Res</span>&lt;<span class="literal">null</span>&gt; =&gt;</span><br><span class="line">    instance.<span class="title function_">get</span>(<span class="string">&quot;/flashSession/list&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// get请求，有参数，路径也要传参  (也可能直接在这写类型，不过不建议,大点的项目会维护一麻烦)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ProductCategoryApi</span> = (<span class="attr">params</span>: &#123; <span class="attr">parentId</span>: <span class="built_in">number</span> &#125;): <span class="function"><span class="params">any</span> =&gt;</span></span><br><span class="line">    instance.<span class="title function_">get</span>(<span class="string">`/productCategory/list/<span class="subst">$&#123;params.parentId&#125;</span>`</span>, &#123; params &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// get请求，有参数，(如果你不会写类型也可以使用any,不过不建议,因为用了之后 和没写TS一样)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AdminListAPI</span> = (<span class="attr">params</span>:<span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> </span><br><span class="line">    instance.<span class="title function_">get</span>(<span class="string">&quot;/admin/list&quot;</span>, &#123; params &#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>sass和less</title>
    <url>/2023/11/21/sass%E5%92%8Cless/</url>
    <content><![CDATA[<p>sass,less</p>
<span id="more"></span>

<h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i -S node-sass sass-loader</span><br><span class="line">npm i -D sass@1.32.10 sass-loader@10.1.0</span><br></pre></td></tr></table></figure>

<h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$baseColor</span>: red;</span><br><span class="line"><span class="variable">$baseColor</span>: red !default; <span class="comment">//!default 给一个未通过 !default 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果变量需要镶嵌在字符串之中</span></span><br><span class="line"><span class="variable">$side</span>: bottom;</span><br><span class="line"><span class="selector-class">.aaa</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-嵌套"><a href="#2-嵌套" class="headerlink" title="2.嵌套"></a>2.嵌套</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  　　&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_15911201/article/details/130772891">详细</a></p>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#999</span>;</span><br></pre></td></tr></table></figure>

<h5 id="选择器变量"><a href="#选择器变量" class="headerlink" title="选择器变量:"></a>选择器变量:</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@mySelector:</span> #wrap;</span><br><span class="line"><span class="variable">@Wrap:</span> wrap;</span><br><span class="line"><span class="variable">@&#123;mySelector&#125;</span>&#123; <span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.@&#123;Wrap&#125;</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#@&#123;Wrap&#125;</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="属性变量："><a href="#属性变量：" class="headerlink" title="属性变量："></a>属性变量：</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@borderStyle:</span> border-style;</span><br><span class="line"><span class="variable">@Soild:</span> solid;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  @&#123;borderStyle&#125;: @<span class="selector-tag">Soild</span>; <span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="url-变量"><a href="#url-变量" class="headerlink" title="url 变量:"></a>url 变量:</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@images:</span> <span class="string">&quot;../img&quot;</span>; <span class="comment">//需要加引号</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;@&#123;images&#125;/dog.png&quot;</span>); <span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;../img/dog.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量:"></a>声明变量:</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@background:</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="variable">@background</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@Rules:</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-id">#con</span> &#123;</span><br><span class="line">  <span class="variable">@Rules</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="变量运算："><a href="#变量运算：" class="headerlink" title="变量运算："></a>变量运算：</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">300px</span>;</span><br><span class="line"><span class="variable">@color:</span> <span class="number">#222</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span> - <span class="number">20</span>; <span class="comment">// 尽量有空格，防止识别不出变量名</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@width</span> - <span class="number">20</span> * <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">margin</span>: (<span class="variable">@width</span> -<span class="number">20</span>) * <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>*<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span> + <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="变量定义变量："><a href="#变量定义变量：" class="headerlink" title="变量定义变量："></a>变量定义变量：</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@fnord:</span> <span class="string">&quot;I am fnord.&quot;</span>;</span><br><span class="line"><span class="variable">@var:</span> <span class="string">&quot;fnord&quot;</span>;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">@@var</span>; <span class="comment">//将@var替换为其值 content:@fnord;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;I am fnord.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/Vvaans/article/details/130421103">详细</a></p>
]]></content>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2023/11/12/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git 常用命令</p>
<span id="more"></span>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">git clone <span class="variable constant_">XXXX</span>; <span class="comment">//克隆远程分支</span></span><br><span class="line"></span><br><span class="line">git add .  <span class="comment">//添加到本地仓库</span></span><br><span class="line"></span><br><span class="line">git commit -m<span class="string">&quot;操作&quot;</span><span class="string">&quot; //提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch //查看本地分支； -a 查看本地和远程所有分支； -r 查看所有远程分支； -vv 查看本地对应远程的分支；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout -b XXX //以当前本地分支作为基础新建一个XXX分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout XXX //切换分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout . //修改的代码(未提交),不修改了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git push origin newtest  //push到远程分支newtest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git push origin --delete newtest //删除远程分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch --set-upstream-to=origin/newtest //切换当前分支推送的远程分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch -d newtest //删除本地分支。-D强制删除没有合并的分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git status //状态</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git diff //查看差异</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git pull //拉取代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git merge xxxx //合并分支，xxx往当前分支插入；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git reset --mixed  //文件退出暂存区，但是修改保留；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git reset HEAD . //</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git reset HEAD fileName // 撤销某个文件；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git reset --soft HEAD^ //撤销commit之后返回成暂存区add状态；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git reset --hard HEAD^  //直接撤销commit和add</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Vuex和Pinia</title>
    <url>/2023/09/20/Vuex%E5%92%8CPinia/</url>
    <content><![CDATA[<p>应用程序开发的状态管理模式，它采用集中式存储管理应用的所有组件状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<span id="more"></span>

<h2 id="Vuex-的使用"><a href="#Vuex-的使用" class="headerlink" title="Vuex 的使用"></a>Vuex 的使用</h2><h3 id="1-Vuex-的安装和注册"><a href="#1-Vuex-的安装和注册" class="headerlink" title="1.Vuex 的安装和注册"></a>1.Vuex 的安装和注册</h3><p>注意：vue 的 2.x 版本对应 vuex 的 3.x 版本，vue 的 3.x 版本对应 vuex 的 4.x 版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save vuex@<span class="number">3.6</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>在 src 目录下新建 store 文件夹，创建 index.js 文件引入、安装、创建并导出 Vuex 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">counter</span>:<span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.导出使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>样例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">//设置全局访问的state对象  要设置的初始属性值</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>), <span class="comment">//存储登录名</span></span><br><span class="line">    <span class="attr">number</span>:<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;number&quot;</span>),  <span class="comment">//存储其他有关数据</span></span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;Authorization&#x27;</span>)  <span class="comment">//存储登录需要用到的请求头token</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//实时监听state值的变化（最新状态）</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="title function_">getusername</span>(<span class="params">state</span>)&#123;  <span class="comment">//承载变化的对象（username）的值</span></span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">username</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getnumber</span>(<span class="params">state</span>)&#123;   <span class="comment">//承载变化的对象（number）的值</span></span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//要修改store中的值唯一的方法就是提交mutation来修改   同步操作</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">//自定义改变state初始值的方法，这里面的参数除了stae之外还可以再传额外的参数（变量或对象）</span></span><br><span class="line">    changeLogin (state, user) &#123;</span><br><span class="line">      state.<span class="property">Authorization</span> = user.<span class="property">Authorization</span>;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;Authorization&#x27;</span>, user.<span class="property">Authorization</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setnumber</span>(<span class="params">state,number</span>)&#123;</span><br><span class="line">      state.<span class="property">number</span>=number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setusername</span>(<span class="params">state,username</span>)&#123;</span><br><span class="line">      state.<span class="property">username</span>=username</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//Action 类似于 mutation，不同在于：1.Action 提交的是 mutation，而不是直接变更状态。2.Action 可以包含任意异步操作。</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">getUser</span>(<span class="params">context, username</span>)&#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setusername&#x27;</span>,username)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//自定义触发mutations里函数的方法context与store实例具有相同方法和属性</span></span><br><span class="line">    <span class="title function_">getNumber</span>(<span class="params">context, number</span>)&#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setnumber&#x27;</span>,number)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 main.js 文件中挂载使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-Vuex-的基本使用"><a href="#2-Vuex-的基本使用" class="headerlink" title="2.Vuex 的基本使用"></a>2.Vuex 的基本使用</h3><p>1.getter 方法的调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">resturantName</span></span><br></pre></td></tr></table></figure>

<p>state 状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">resturantName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">resturantName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.mutations 中方法的调用方式<br>不能直接调用 this.$store.mutations.setResturantName(‘KFC’)，必须使用如下方式调用：this.$store.commit(type,payload);</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、把载荷和type分开提交</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setResturantName&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">resturantName</span>:<span class="string">&#x27;KFC&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、载荷和type写到一起</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;setResturantName&#x27;</span>,</span><br><span class="line">  <span class="attr">resturantName</span>: <span class="string">&#x27;KFC&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.actions 数据的静态异步(async)操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxx&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;KFC&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Pinia-的使用"><a href="#Pinia-的使用" class="headerlink" title="Pinia 的使用"></a>Pinia 的使用</h2><h3 id="1-Pinia-的安装和注册"><a href="#1-Pinia-的安装和注册" class="headerlink" title="1.Pinia 的安装和注册"></a>1.Pinia 的安装和注册</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>

<p>在 src 目录下新建 store 文件夹，创建 index.js 文件引入、安装、创建并导出 Pinia 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//defineStore()：创建仓库容器的方法，主要有两个参数，第一个参数是容器的一个别名，</span></span><br><span class="line"><span class="comment">//特点：此名字必须唯一，不能重复，第二个参数是配置信息即仓库的初始化数据和方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> indexStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>样例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// useMain  可以是 useUser、useCart 之类的名字</span></span><br><span class="line"><span class="comment">// defineStore(&#x27;main&#x27;,&#123;..&#125;) 在devtools 就使用 main 这个名</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMain = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 相当于data</span></span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="comment">// 所有这些属性都将自动推断其类型,如果推断失败可以试下 as xxx</span></span><br><span class="line">          <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 相当于计算属性</span></span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">counter</span> * <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 相当于vuex的 mutation + action，可以同时写同步和异步的代码</span></span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">counter</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 main.js 文件中挂载使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-Pinia-的基本使用"><a href="#2-Pinia-的基本使用" class="headerlink" title="2.Pinia 的基本使用"></a>2.Pinia 的基本使用</h3><p>1.获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;store.helloWorld&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>解构：&#123;&#123; helloWorld &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; indexStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> store = <span class="title function_">indexStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 解构：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; helloWorld &#125; = <span class="title function_">storeToRefs</span>(store)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.$patch 的两种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; indexStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">indexStore</span>()</span><br><span class="line"><span class="comment">// 方法一-直接改</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">update</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.<span class="property">helloWorld</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法二-使用$patch</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickPatch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(&#123;</span><br><span class="line">    <span class="attr">helloWorld</span>: <span class="string">&#x27;hello world patch&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法三-使用$patch回调函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickMethod</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.$patch(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">    state.<span class="property">helloWorld</span> = <span class="string">&#x27;hello world  method&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>3.使用 actions，注意 actions 中的 this 指向，这里不能使用箭头函数<br>在&#x2F;store 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> indexStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">helloWorld</span>: <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="title function_">actionChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">helloWorld</span> = <span class="string">&#x27;hello world actions&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在&#x2F;Hello 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; indexStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">indexStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClickActions</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  store.<span class="title function_">actionChange</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>4.重置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; indexStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">indexStore</span>()</span><br><span class="line">store.$reset()</span><br></pre></td></tr></table></figure>

<h3 id="3-Pinia-储存持久化"><a href="#3-Pinia-储存持久化" class="headerlink" title="3.Pinia 储存持久化"></a>3.Pinia 储存持久化</h3><h4 id="1-安装-pinia-plugin-persistedstate-插件"><a href="#1-安装-pinia-plugin-persistedstate-插件" class="headerlink" title="1.安装 pinia-plugin-persistedstate 插件"></a>1.安装 pinia-plugin-persistedstate 插件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure>

<h4 id="2-安装完成后-在-main-ts-js-文件内进行配置"><a href="#2-安装完成后-在-main-ts-js-文件内进行配置" class="headerlink" title="2.安装完成后 在 main.ts&#x2F;js 文件内进行配置"></a>2.安装完成后 在 main.ts&#x2F;js 文件内进行配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate  <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-store-里添加-persist-true，与-getters-同级"><a href="#3-store-里添加-persist-true，与-getters-同级" class="headerlink" title="3.store 里添加 persist: true，与 getters 同级"></a>3.store 里添加 persist: true，与 getters 同级</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 相当于vuex的 mutation + action，可以同时写同步和异步的代码</span></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">persist</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p><em>借鉴:<a href="https://blog.csdn.net/m0_67476502/article/details/124750596">Vuex</a>和<a href="https://zhuanlan.zhihu.com/p/575738777">Pinia</a></em></p>
]]></content>
  </entry>
  <entry>
    <title>vue3异步组件</title>
    <url>/2023/07/20/vue3%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。Vue 提供了 defineAsyncComponent 方法来实现此功能<br>异步组价打包时会分包。</p>
<span id="more"></span>

<h2 id="场景一，按需引入"><a href="#场景一，按需引入" class="headerlink" title="场景一，按需引入"></a>场景一，按需引入</h2><p>下载包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install @vueuse/core -S</span><br></pre></td></tr></table></figure>

<p>向下滑出现这个 C 组件才会加载 C 组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">B</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;target&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">C</span> <span class="attr">v-if</span>=<span class="string">&quot;targetIsVisible&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useIntersectionObserver &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./A.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">&#x27;./B.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> C = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span>(<span class="string">&#x27;./C.vue&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> target = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> targetIsVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">useIntersectionObserver</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    target,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">(<span class="params">[&#123; isIntersecting &#125;]: any</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (isIntersecting) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            targetIsVisible.<span class="property">value</span> = isIntersecting</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(isIntersecting);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="场景二-异步依赖，搭配-Suspense-使用"><a href="#场景二-异步依赖，搭配-Suspense-使用" class="headerlink" title="场景二 异步依赖，搭配 Suspense 使用"></a>场景二 异步依赖，搭配 Suspense 使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Suspense</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        加载中...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./A.vue&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>一般是这种用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div ref=<span class="string">&quot;target&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">v-if</span>=<span class="string">&quot;targetIsVisible&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">C</span>&gt;</span><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            加载中...</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useIntersectionObserver &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">const</span> C = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./C.vue&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> target = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> targetIsVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="title function_">useIntersectionObserver</span>(</span><br><span class="line">    target,</span><br><span class="line">    <span class="function">(<span class="params">[&#123; isIntersecting &#125;]: any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">            targetIsVisible.<span class="property">value</span> = isIntersecting</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(isIntersecting);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><em><a href="https://cn.vuejs.org/guide/components/async.html">官方文档</a></em></h4>]]></content>
  </entry>
  <entry>
    <title>vue3+vite+ts项目笔记</title>
    <url>/2023/06/01/vue3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>包括搭建项目，父子组件传值，兄弟组件传值，插槽，Teleport 组件，依赖注入</p>
<span id="more"></span>

<h4 id="搭建项目-点击"><a href="#搭建项目-点击" class="headerlink" title="搭建项目: 点击"></a>搭建项目: <a href="https://blog.csdn.net/weixin_59916662/article/details/127331094">点击</a></h4><h4 id="vue官网-进入"><a href="#vue官网-进入" class="headerlink" title="vue官网: 进入"></a>vue官网: <a href="https://cn.vuejs.org/guide/components/v-model.html">进入</a></h4><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><h3 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1.父传子"></a>1.父传子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;父组件</span><br><span class="line">  &lt;list :msg=<span class="string">&quot;msg&quot;</span>&gt;&lt;/list&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;传过去的&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;这是子组件&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&quot;默认值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2.子传父"></a>2.子传父</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;这是子组件&#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;changeNum&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">ref</span>(<span class="number">200</span>)</span><br><span class="line"><span class="comment">// const emit = defineEmits([&#x27;fn&#x27;])</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">    (<span class="attr">e</span>:<span class="string">&quot;fn&quot;</span>, <span class="attr">id</span>: number): <span class="keyword">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeNum</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&quot;fn&quot;</span>,num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;父组件</span><br><span class="line">  &lt;list @fn=<span class="string">&#x27;changeHome&#x27;</span>&gt;&lt;/list&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">changeHome</span> = (<span class="params">n</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-v-model-传值"><a href="#3-v-model-传值" class="headerlink" title="3.v-model 传值"></a>3.v-model 传值</h3><p><a href="https://cn.vuejs.org/guide/components/v-model.html">看官网</a></p>
<h2 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h2><h3 id="1-通过父组件比较繁琐"><a href="#1-通过父组件比较繁琐" class="headerlink" title="1.通过父组件比较繁琐"></a>1.通过父组件比较繁琐</h3><h3 id="2-通过-mitt"><a href="#2-通过-mitt" class="headerlink" title="2.通过 mitt"></a>2.通过 mitt</h3><h4 id="1）-下载安装"><a href="#1）-下载安装" class="headerlink" title="1）.下载安装"></a>1）.下载安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install mitt -S</span><br></pre></td></tr></table></figure>

<h4 id="2）-新建文件夹"><a href="#2）-新建文件夹" class="headerlink" title="2）.新建文件夹"></a>2）.新建文件夹</h4><p>src&#x2F;plugins&#x2F;Bus.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bus.js内</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//兄弟组件A中</span></span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@plugins/Bus.js&quot;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="title function_">ref</span>(<span class="string">&quot;A值&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btn</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    emitter.<span class="title function_">emit</span>(<span class="string">&#x27;fn&#x27;</span>,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//兄弟组件B中 接收</span></span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@plugins/Bus.js&quot;</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btn</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    emitter.<span class="title function_">on</span>(<span class="string">&#x27;fn&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        s.<span class="property">value</span> = e.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">value</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="1-匿名插槽"><a href="#1-匿名插槽" class="headerlink" title="1.匿名插槽"></a>1.匿名插槽</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line">&lt;A&gt;</span><br><span class="line">    这是xxx数据</span><br><span class="line">    这是yyy数据</span><br><span class="line">&lt;/A&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a>2.具名插槽</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line">&lt;A&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:xxx</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        这是xxx数据</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">yyy</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        这是yyy数据</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/A&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;yyy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3.作用域插槽"></a>3.作用域插槽</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line">&lt;template v-slot=<span class="string">&quot;&#123;data&#125;&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; data.<span class="property">name</span> &#125;&#125;---&#123;&#123; data.<span class="property">age</span> &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="comment">//可以简写成#default</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;&#123;data&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; data.name &#125;&#125;---&#123;&#123; data.age &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-动态插槽"><a href="#4-动态插槽" class="headerlink" title="4.动态插槽"></a>4.动态插槽</h3><p>就是通过数据动态切换插槽名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line">&lt;template #[name]&gt;</span><br><span class="line">    这是xxx</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Teleport-组件"><a href="#Teleport-组件" class="headerlink" title="Teleport 组件"></a>Teleport 组件</h2><p>传送</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Teleport</span> to=<span class="string">&quot;body&quot;</span>&gt;&lt;/<span class="title class_">Teleport</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;.mian&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;#container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件：提供</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="comment">/* 注入名 */</span> <span class="string">&#x27;message&#x27;</span>, <span class="comment">/* 值 */</span> <span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line"><span class="comment">//如果你想确保提供的数据不能被注入方的组件更改，你可以使用 readonly() 来包装提供的值</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="string">&#x27;read-only-message&#x27;</span>, <span class="title function_">readonly</span>(message))</span><br><span class="line"></span><br><span class="line"><span class="comment">//子孙组件：注入</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="title function_">inject</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注入默认值</span></span><br><span class="line"><span class="comment">// 如果没有祖先组件提供 &quot;message&quot;</span></span><br><span class="line"><span class="comment">// `value` 会是 &quot;这是默认值&quot;</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;这是默认值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Symbol 作注入名</span></span><br><span class="line">我们通常推荐在一个单独的文件中导出这些注入名 <span class="title class_">Symbol</span>：</span><br><span class="line"><span class="comment">// keys.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myInjectionKey = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在供给方组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; myInjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;./keys.js&#x27;</span></span><br><span class="line"><span class="title function_">provide</span>(myInjectionKey, &#123; <span class="comment">/*</span></span><br><span class="line"><span class="comment">  要提供的数据</span></span><br><span class="line"><span class="comment">*/</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入方组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; myInjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;./keys.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> injected = <span class="title function_">inject</span>(myInjectionKey)</span><br></pre></td></tr></table></figure>




<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//刷新页面</span></span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;5&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
