<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 基本使用</title>
    <url>/2023/06/17/hexo/</url>
    <content><![CDATA[<p>Hexo是一款基于Node.js的静态博客框架,依赖少易于安装使用,可以方便的生成静态网页托管在GitHub和Coding上,是搭建博客的首选框架。</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vuex和Pinia</title>
    <url>/2023/06/21/ce/</url>
    <content><![CDATA[<p>应用程序开发的状态管理模式，它采用集中式存储管理应用的所有组件状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<span id="more"></span>

<h2 id="Vuex-的使用"><a href="#Vuex-的使用" class="headerlink" title="Vuex 的使用"></a>Vuex 的使用</h2><h3 id="1-Vuex-的安装和注册"><a href="#1-Vuex-的安装和注册" class="headerlink" title="1.Vuex 的安装和注册"></a>1.Vuex 的安装和注册</h3><p>注意：vue 的 2.x 版本对应 vuex 的 3.x 版本，vue 的 3.x 版本对应 vuex 的 4.x 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vuex@3.6.2</span><br></pre></td></tr></table></figure>

<p>在 src 目录下新建 store 文件夹，创建 index.js 文件引入、安装、创建并导出 Vuex 对象。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import Vuex from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">//1.安装插件</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">//2.创建对象</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    counter:1000</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;&#125;,</span><br><span class="line">  actions:&#123;&#125;,</span><br><span class="line">  getters:&#123;&#125;,</span><br><span class="line">  modules:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//3.导出使用</span><br><span class="line"><span class="built_in">export</span> default store</span><br></pre></td></tr></table></figure>

<p>样例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import Vuex from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</span><br><span class="line">  //设置全局访问的state对象  要设置的初始属性值</span><br><span class="line">  state: &#123;</span><br><span class="line">    username:localStorage.getItem(<span class="string">&quot;username&quot;</span>), //存储登录名</span><br><span class="line">    number:localStorage.getItem(<span class="string">&quot;number&quot;</span>),  //存储其他有关数据</span><br><span class="line">    Authorization: localStorage.getItem(<span class="string">&#x27;Authorization&#x27;</span>)  //存储登录需要用到的请求头token</span><br><span class="line">  &#125;,</span><br><span class="line">  //实时监听state值的变化（最新状态）</span><br><span class="line">  getters:&#123;</span><br><span class="line">    getusername(state)&#123;  //承载变化的对象（username）的值</span><br><span class="line">      <span class="built_in">return</span> state.username</span><br><span class="line">    &#125;,</span><br><span class="line">    getnumber(state)&#123;   //承载变化的对象（number）的值</span><br><span class="line">      <span class="built_in">return</span> state.number</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //要修改store中的值唯一的方法就是提交mutation来修改   同步操作</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    //自定义改变state初始值的方法，这里面的参数除了stae之外还可以再传额外的参数（变量或对象）</span><br><span class="line">    changeLogin (state, user) &#123;</span><br><span class="line">      state.Authorization = user.Authorization;</span><br><span class="line">      localStorage.setItem(<span class="string">&#x27;Authorization&#x27;</span>, user.Authorization);</span><br><span class="line">    &#125;,</span><br><span class="line">    setnumber(state,number)&#123;</span><br><span class="line">      state.number=number</span><br><span class="line">    &#125;,</span><br><span class="line">    setusername(state,username)&#123;</span><br><span class="line">      state.username=username</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //Action 类似于 mutation，不同在于：1.Action 提交的是 mutation，而不是直接变更状态。2.Action 可以包含任意异步操作。</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getUser(context, username)&#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;setusername&#x27;</span>,username)</span><br><span class="line">    &#125;,</span><br><span class="line">    //自定义触发mutations里函数的方法context与store实例具有相同方法和属性</span><br><span class="line">    getNumber(context, number)&#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;setnumber&#x27;</span>,number)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 main.js 文件中挂载使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import App from <span class="string">&#x27;./App&#x27;</span></span><br><span class="line">import router from <span class="string">&#x27;./router&#x27;</span></span><br><span class="line">import store from <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-Vuex-的基本使用"><a href="#2-Vuex-的基本使用" class="headerlink" title="2.Vuex 的基本使用"></a>2.Vuex 的基本使用</h3><p>1.getter方法的调用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.getters.resturantName</span><br></pre></td></tr></table></figure>
<p>state状态存储是响应式的，从store实例中读取状态最简单的方法就是在计算属性中返回某个状态，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  resturantName: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.<span class="variable">$store</span>.getters.resturantName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.mutations中方法的调用方式<br>不能直接调用this.$store.mutations.setResturantName(‘KFC’)，必须使用如下方式调用：this.$store.commit(type,payload);</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 1、把载荷和<span class="built_in">type</span>分开提交</span><br><span class="line">this.<span class="variable">$store</span>.commit(<span class="string">&#x27;setResturantName&#x27;</span>,&#123;</span><br><span class="line">  resturantName:<span class="string">&#x27;KFC&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 2、载荷和<span class="built_in">type</span>写到一起</span><br><span class="line">this.<span class="variable">$store</span>.commit(&#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;setResturantName&#x27;</span>,</span><br><span class="line">  resturantName: <span class="string">&#x27;KFC&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>3.actions数据的静态异步(async)操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.dispatch(<span class="string">&#x27;xxx&#x27;</span>,&#123;</span><br><span class="line">  name:<span class="string">&#x27;KFC&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Pinia-的使用"><a href="#Pinia-的使用" class="headerlink" title="Pinia 的使用"></a>Pinia 的使用</h2><h3 id="1-Pinia-的安装和注册"><a href="#1-Pinia-的安装和注册" class="headerlink" title="1.Pinia 的安装和注册"></a>1.Pinia 的安装和注册</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>
<p>在 src 目录下新建 store 文件夹，创建 index.js 文件引入、安装、创建并导出 Pinia 对象。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import &#123; defineStore &#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">//defineStore()：创建仓库容器的方法，主要有两个参数，第一个参数是容器的一个别名，</span><br><span class="line">//特点：此名字必须唯一，不能重复，第二个参数是配置信息即仓库的初始化数据和方法</span><br><span class="line"><span class="built_in">export</span> const indexStore = defineStore(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    state: ()=&gt;&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>样例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import &#123; defineStore &#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">// useMain  可以是 useUser、useCart 之类的名字 </span><br><span class="line">// defineStore(<span class="string">&#x27;main&#x27;</span>,&#123;..&#125;) 在devtools 就使用 main 这个名</span><br><span class="line"><span class="built_in">export</span> const useMain = defineStore(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    // 相当于data</span><br><span class="line">    state: () =&gt; &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">          // 所有这些属性都将自动推断其类型,如果推断失败可以试下 as xxx</span><br><span class="line">          counter: 0,</span><br><span class="line">          name: <span class="string">&#x27;Eduardo&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 相当于计算属性</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doubleCount: (state) =&gt; &#123;</span><br><span class="line">            <span class="built_in">return</span> state.counter * 2</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 相当于vuex的 mutation + action，可以同时写同步和异步的代码</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span></span>() &#123;</span><br><span class="line">          this.counter++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">randomizeCounter</span></span>() &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                this.counter = Math.round(<span class="number">100</span> * Math.random())</span><br><span class="line">            &#125;, 0);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在 main.js 文件中挂载使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import App from <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">import &#123;createPinia&#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">const store = createPinia()</span><br><span class="line"></span><br><span class="line">createApp(App).use(ElementPlus).use(router).use(store).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-Pinia-的基本使用"><a href="#2-Pinia-的基本使用" class="headerlink" title="2.Pinia 的基本使用"></a>2.Pinia 的基本使用</h3><p>1.获取数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;store.helloWorld&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;解构：&#123;&#123; helloWorld &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line">import &#123; indexStore &#125; from <span class="string">&quot;../store&quot;</span></span><br><span class="line">import &#123; storeToRefs &#125; from <span class="string">&quot;pinia&quot;</span></span><br><span class="line">const store = indexStore()</span><br><span class="line">// 解构：</span><br><span class="line">const &#123; helloWorld &#125; = storeToRefs(store)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>2.$patch的两种方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line">import &#123; indexStore &#125; from <span class="string">&quot;../store&quot;</span>;</span><br><span class="line">const store = indexStore()</span><br><span class="line">// 方法一-直接改</span><br><span class="line">const update = () =&gt; &#123;</span><br><span class="line">  store.helloWorld = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">// 方法二-使用<span class="variable">$patch</span></span><br><span class="line">const handleClickPatch = () =&gt; &#123;</span><br><span class="line">  store.<span class="variable">$patch</span>(&#123;</span><br><span class="line">    helloWorld: <span class="string">&#x27;hello world patch&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 方法三-使用<span class="variable">$patch</span>回调函数</span><br><span class="line">const handleClickMethod = () =&gt; &#123;</span><br><span class="line">  store.<span class="variable">$patch</span>((state)=&gt;&#123;</span><br><span class="line">    state.helloWorld = &#x27;hello world  method&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>3.使用actions，注意actions中的this指向，这里不能使用箭头函数<br>在&#x2F;store中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import &#123; defineStore &#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const indexStore = defineStore(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    state: ()=&gt;&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">          helloWorld: <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      <span class="function"><span class="title">actionChange</span></span>() &#123;</span><br><span class="line">            this.helloWorld = <span class="string">&#x27;hello world actions&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在&#x2F;Hello中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line">import &#123; indexStore &#125; from <span class="string">&quot;../store&quot;</span>;</span><br><span class="line">const store = indexStore()</span><br><span class="line"></span><br><span class="line">const handleClickActions = () =&gt; &#123;</span><br><span class="line">  store.actionChange()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><em>借鉴:<a href="https://blog.csdn.net/m0_67476502/article/details/124750596">Vuex</a>和<a href="https://zhuanlan.zhihu.com/p/575738777">Pinia</a></em></p>
]]></content>
  </entry>
</search>
